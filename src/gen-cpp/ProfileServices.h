/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ProfileServices_H
#define ProfileServices_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "SocialServices_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ProfileServicesIf {
 public:
  virtual ~ProfileServicesIf() {}
  virtual int32_t Login(const std::string& username, const std::string& password) = 0;
  virtual ErrorCode::type Logout(const int32_t userId) = 0;
  virtual void CreateProfile(CreateUserResult& _return, const UserProfile& profile) = 0;
  virtual void GetProfile(GetUserResult& _return, const int32_t userId) = 0;
  virtual ErrorCode::type UpdateProfile(const UserProfile& profile, const int32_t userId) = 0;
  virtual ErrorCode::type DeleteProfile(const int32_t userId) = 0;
  virtual void ansyCreateProfile(CreateUserResult& _return, const UserProfile& profile) = 0;
  virtual ErrorCode::type ansyUpdateProfile(const UserProfile& profile, const int32_t userId) = 0;
  virtual ErrorCode::type ansyDeleteProfile(const int32_t userId) = 0;
  virtual void getList(ListProfileResult& _return, const std::vector<int32_t> & ids) = 0;
  virtual int32_t GetIdByName(const std::string& username) = 0;
};

class ProfileServicesIfFactory {
 public:
  typedef ProfileServicesIf Handler;

  virtual ~ProfileServicesIfFactory() {}

  virtual ProfileServicesIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ProfileServicesIf* /* handler */) = 0;
};

class ProfileServicesIfSingletonFactory : virtual public ProfileServicesIfFactory {
 public:
  ProfileServicesIfSingletonFactory(const boost::shared_ptr<ProfileServicesIf>& iface) : iface_(iface) {}
  virtual ~ProfileServicesIfSingletonFactory() {}

  virtual ProfileServicesIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ProfileServicesIf* /* handler */) {}

 protected:
  boost::shared_ptr<ProfileServicesIf> iface_;
};

class ProfileServicesNull : virtual public ProfileServicesIf {
 public:
  virtual ~ProfileServicesNull() {}
  int32_t Login(const std::string& /* username */, const std::string& /* password */) {
    int32_t _return = 0;
    return _return;
  }
  ErrorCode::type Logout(const int32_t /* userId */) {
    ErrorCode::type _return = (ErrorCode::type)0;
    return _return;
  }
  void CreateProfile(CreateUserResult& /* _return */, const UserProfile& /* profile */) {
    return;
  }
  void GetProfile(GetUserResult& /* _return */, const int32_t /* userId */) {
    return;
  }
  ErrorCode::type UpdateProfile(const UserProfile& /* profile */, const int32_t /* userId */) {
    ErrorCode::type _return = (ErrorCode::type)0;
    return _return;
  }
  ErrorCode::type DeleteProfile(const int32_t /* userId */) {
    ErrorCode::type _return = (ErrorCode::type)0;
    return _return;
  }
  void ansyCreateProfile(CreateUserResult& /* _return */, const UserProfile& /* profile */) {
    return;
  }
  ErrorCode::type ansyUpdateProfile(const UserProfile& /* profile */, const int32_t /* userId */) {
    ErrorCode::type _return = (ErrorCode::type)0;
    return _return;
  }
  ErrorCode::type ansyDeleteProfile(const int32_t /* userId */) {
    ErrorCode::type _return = (ErrorCode::type)0;
    return _return;
  }
  void getList(ListProfileResult& /* _return */, const std::vector<int32_t> & /* ids */) {
    return;
  }
  int32_t GetIdByName(const std::string& /* username */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _ProfileServices_Login_args__isset {
  _ProfileServices_Login_args__isset() : username(false), password(false) {}
  bool username :1;
  bool password :1;
} _ProfileServices_Login_args__isset;

class ProfileServices_Login_args {
 public:

  ProfileServices_Login_args(const ProfileServices_Login_args&);
  ProfileServices_Login_args& operator=(const ProfileServices_Login_args&);
  ProfileServices_Login_args() : username(), password() {
  }

  virtual ~ProfileServices_Login_args() throw();
  std::string username;
  std::string password;

  _ProfileServices_Login_args__isset __isset;

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const ProfileServices_Login_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_Login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_Login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProfileServices_Login_pargs {
 public:


  virtual ~ProfileServices_Login_pargs() throw();
  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_Login_result__isset {
  _ProfileServices_Login_result__isset() : success(false) {}
  bool success :1;
} _ProfileServices_Login_result__isset;

class ProfileServices_Login_result {
 public:

  ProfileServices_Login_result(const ProfileServices_Login_result&);
  ProfileServices_Login_result& operator=(const ProfileServices_Login_result&);
  ProfileServices_Login_result() : success(0) {
  }

  virtual ~ProfileServices_Login_result() throw();
  int32_t success;

  _ProfileServices_Login_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const ProfileServices_Login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_Login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_Login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_Login_presult__isset {
  _ProfileServices_Login_presult__isset() : success(false) {}
  bool success :1;
} _ProfileServices_Login_presult__isset;

class ProfileServices_Login_presult {
 public:


  virtual ~ProfileServices_Login_presult() throw();
  int32_t* success;

  _ProfileServices_Login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ProfileServices_Logout_args__isset {
  _ProfileServices_Logout_args__isset() : userId(false) {}
  bool userId :1;
} _ProfileServices_Logout_args__isset;

class ProfileServices_Logout_args {
 public:

  ProfileServices_Logout_args(const ProfileServices_Logout_args&);
  ProfileServices_Logout_args& operator=(const ProfileServices_Logout_args&);
  ProfileServices_Logout_args() : userId(0) {
  }

  virtual ~ProfileServices_Logout_args() throw();
  int32_t userId;

  _ProfileServices_Logout_args__isset __isset;

  void __set_userId(const int32_t val);

  bool operator == (const ProfileServices_Logout_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_Logout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_Logout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProfileServices_Logout_pargs {
 public:


  virtual ~ProfileServices_Logout_pargs() throw();
  const int32_t* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_Logout_result__isset {
  _ProfileServices_Logout_result__isset() : success(false) {}
  bool success :1;
} _ProfileServices_Logout_result__isset;

class ProfileServices_Logout_result {
 public:

  ProfileServices_Logout_result(const ProfileServices_Logout_result&);
  ProfileServices_Logout_result& operator=(const ProfileServices_Logout_result&);
  ProfileServices_Logout_result() : success((ErrorCode::type)0) {
  }

  virtual ~ProfileServices_Logout_result() throw();
  ErrorCode::type success;

  _ProfileServices_Logout_result__isset __isset;

  void __set_success(const ErrorCode::type val);

  bool operator == (const ProfileServices_Logout_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_Logout_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_Logout_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_Logout_presult__isset {
  _ProfileServices_Logout_presult__isset() : success(false) {}
  bool success :1;
} _ProfileServices_Logout_presult__isset;

class ProfileServices_Logout_presult {
 public:


  virtual ~ProfileServices_Logout_presult() throw();
  ErrorCode::type* success;

  _ProfileServices_Logout_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ProfileServices_CreateProfile_args__isset {
  _ProfileServices_CreateProfile_args__isset() : profile(false) {}
  bool profile :1;
} _ProfileServices_CreateProfile_args__isset;

class ProfileServices_CreateProfile_args {
 public:

  ProfileServices_CreateProfile_args(const ProfileServices_CreateProfile_args&);
  ProfileServices_CreateProfile_args& operator=(const ProfileServices_CreateProfile_args&);
  ProfileServices_CreateProfile_args() {
  }

  virtual ~ProfileServices_CreateProfile_args() throw();
  UserProfile profile;

  _ProfileServices_CreateProfile_args__isset __isset;

  void __set_profile(const UserProfile& val);

  bool operator == (const ProfileServices_CreateProfile_args & rhs) const
  {
    if (!(profile == rhs.profile))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_CreateProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_CreateProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProfileServices_CreateProfile_pargs {
 public:


  virtual ~ProfileServices_CreateProfile_pargs() throw();
  const UserProfile* profile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_CreateProfile_result__isset {
  _ProfileServices_CreateProfile_result__isset() : success(false) {}
  bool success :1;
} _ProfileServices_CreateProfile_result__isset;

class ProfileServices_CreateProfile_result {
 public:

  ProfileServices_CreateProfile_result(const ProfileServices_CreateProfile_result&);
  ProfileServices_CreateProfile_result& operator=(const ProfileServices_CreateProfile_result&);
  ProfileServices_CreateProfile_result() {
  }

  virtual ~ProfileServices_CreateProfile_result() throw();
  CreateUserResult success;

  _ProfileServices_CreateProfile_result__isset __isset;

  void __set_success(const CreateUserResult& val);

  bool operator == (const ProfileServices_CreateProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_CreateProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_CreateProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_CreateProfile_presult__isset {
  _ProfileServices_CreateProfile_presult__isset() : success(false) {}
  bool success :1;
} _ProfileServices_CreateProfile_presult__isset;

class ProfileServices_CreateProfile_presult {
 public:


  virtual ~ProfileServices_CreateProfile_presult() throw();
  CreateUserResult* success;

  _ProfileServices_CreateProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ProfileServices_GetProfile_args__isset {
  _ProfileServices_GetProfile_args__isset() : userId(false) {}
  bool userId :1;
} _ProfileServices_GetProfile_args__isset;

class ProfileServices_GetProfile_args {
 public:

  ProfileServices_GetProfile_args(const ProfileServices_GetProfile_args&);
  ProfileServices_GetProfile_args& operator=(const ProfileServices_GetProfile_args&);
  ProfileServices_GetProfile_args() : userId(0) {
  }

  virtual ~ProfileServices_GetProfile_args() throw();
  int32_t userId;

  _ProfileServices_GetProfile_args__isset __isset;

  void __set_userId(const int32_t val);

  bool operator == (const ProfileServices_GetProfile_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_GetProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_GetProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProfileServices_GetProfile_pargs {
 public:


  virtual ~ProfileServices_GetProfile_pargs() throw();
  const int32_t* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_GetProfile_result__isset {
  _ProfileServices_GetProfile_result__isset() : success(false) {}
  bool success :1;
} _ProfileServices_GetProfile_result__isset;

class ProfileServices_GetProfile_result {
 public:

  ProfileServices_GetProfile_result(const ProfileServices_GetProfile_result&);
  ProfileServices_GetProfile_result& operator=(const ProfileServices_GetProfile_result&);
  ProfileServices_GetProfile_result() {
  }

  virtual ~ProfileServices_GetProfile_result() throw();
  GetUserResult success;

  _ProfileServices_GetProfile_result__isset __isset;

  void __set_success(const GetUserResult& val);

  bool operator == (const ProfileServices_GetProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_GetProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_GetProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_GetProfile_presult__isset {
  _ProfileServices_GetProfile_presult__isset() : success(false) {}
  bool success :1;
} _ProfileServices_GetProfile_presult__isset;

class ProfileServices_GetProfile_presult {
 public:


  virtual ~ProfileServices_GetProfile_presult() throw();
  GetUserResult* success;

  _ProfileServices_GetProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ProfileServices_UpdateProfile_args__isset {
  _ProfileServices_UpdateProfile_args__isset() : profile(false), userId(false) {}
  bool profile :1;
  bool userId :1;
} _ProfileServices_UpdateProfile_args__isset;

class ProfileServices_UpdateProfile_args {
 public:

  ProfileServices_UpdateProfile_args(const ProfileServices_UpdateProfile_args&);
  ProfileServices_UpdateProfile_args& operator=(const ProfileServices_UpdateProfile_args&);
  ProfileServices_UpdateProfile_args() : userId(0) {
  }

  virtual ~ProfileServices_UpdateProfile_args() throw();
  UserProfile profile;
  int32_t userId;

  _ProfileServices_UpdateProfile_args__isset __isset;

  void __set_profile(const UserProfile& val);

  void __set_userId(const int32_t val);

  bool operator == (const ProfileServices_UpdateProfile_args & rhs) const
  {
    if (!(profile == rhs.profile))
      return false;
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_UpdateProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_UpdateProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProfileServices_UpdateProfile_pargs {
 public:


  virtual ~ProfileServices_UpdateProfile_pargs() throw();
  const UserProfile* profile;
  const int32_t* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_UpdateProfile_result__isset {
  _ProfileServices_UpdateProfile_result__isset() : success(false) {}
  bool success :1;
} _ProfileServices_UpdateProfile_result__isset;

class ProfileServices_UpdateProfile_result {
 public:

  ProfileServices_UpdateProfile_result(const ProfileServices_UpdateProfile_result&);
  ProfileServices_UpdateProfile_result& operator=(const ProfileServices_UpdateProfile_result&);
  ProfileServices_UpdateProfile_result() : success((ErrorCode::type)0) {
  }

  virtual ~ProfileServices_UpdateProfile_result() throw();
  ErrorCode::type success;

  _ProfileServices_UpdateProfile_result__isset __isset;

  void __set_success(const ErrorCode::type val);

  bool operator == (const ProfileServices_UpdateProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_UpdateProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_UpdateProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_UpdateProfile_presult__isset {
  _ProfileServices_UpdateProfile_presult__isset() : success(false) {}
  bool success :1;
} _ProfileServices_UpdateProfile_presult__isset;

class ProfileServices_UpdateProfile_presult {
 public:


  virtual ~ProfileServices_UpdateProfile_presult() throw();
  ErrorCode::type* success;

  _ProfileServices_UpdateProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ProfileServices_DeleteProfile_args__isset {
  _ProfileServices_DeleteProfile_args__isset() : userId(false) {}
  bool userId :1;
} _ProfileServices_DeleteProfile_args__isset;

class ProfileServices_DeleteProfile_args {
 public:

  ProfileServices_DeleteProfile_args(const ProfileServices_DeleteProfile_args&);
  ProfileServices_DeleteProfile_args& operator=(const ProfileServices_DeleteProfile_args&);
  ProfileServices_DeleteProfile_args() : userId(0) {
  }

  virtual ~ProfileServices_DeleteProfile_args() throw();
  int32_t userId;

  _ProfileServices_DeleteProfile_args__isset __isset;

  void __set_userId(const int32_t val);

  bool operator == (const ProfileServices_DeleteProfile_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_DeleteProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_DeleteProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProfileServices_DeleteProfile_pargs {
 public:


  virtual ~ProfileServices_DeleteProfile_pargs() throw();
  const int32_t* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_DeleteProfile_result__isset {
  _ProfileServices_DeleteProfile_result__isset() : success(false) {}
  bool success :1;
} _ProfileServices_DeleteProfile_result__isset;

class ProfileServices_DeleteProfile_result {
 public:

  ProfileServices_DeleteProfile_result(const ProfileServices_DeleteProfile_result&);
  ProfileServices_DeleteProfile_result& operator=(const ProfileServices_DeleteProfile_result&);
  ProfileServices_DeleteProfile_result() : success((ErrorCode::type)0) {
  }

  virtual ~ProfileServices_DeleteProfile_result() throw();
  ErrorCode::type success;

  _ProfileServices_DeleteProfile_result__isset __isset;

  void __set_success(const ErrorCode::type val);

  bool operator == (const ProfileServices_DeleteProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_DeleteProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_DeleteProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_DeleteProfile_presult__isset {
  _ProfileServices_DeleteProfile_presult__isset() : success(false) {}
  bool success :1;
} _ProfileServices_DeleteProfile_presult__isset;

class ProfileServices_DeleteProfile_presult {
 public:


  virtual ~ProfileServices_DeleteProfile_presult() throw();
  ErrorCode::type* success;

  _ProfileServices_DeleteProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ProfileServices_ansyCreateProfile_args__isset {
  _ProfileServices_ansyCreateProfile_args__isset() : profile(false) {}
  bool profile :1;
} _ProfileServices_ansyCreateProfile_args__isset;

class ProfileServices_ansyCreateProfile_args {
 public:

  ProfileServices_ansyCreateProfile_args(const ProfileServices_ansyCreateProfile_args&);
  ProfileServices_ansyCreateProfile_args& operator=(const ProfileServices_ansyCreateProfile_args&);
  ProfileServices_ansyCreateProfile_args() {
  }

  virtual ~ProfileServices_ansyCreateProfile_args() throw();
  UserProfile profile;

  _ProfileServices_ansyCreateProfile_args__isset __isset;

  void __set_profile(const UserProfile& val);

  bool operator == (const ProfileServices_ansyCreateProfile_args & rhs) const
  {
    if (!(profile == rhs.profile))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_ansyCreateProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_ansyCreateProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProfileServices_ansyCreateProfile_pargs {
 public:


  virtual ~ProfileServices_ansyCreateProfile_pargs() throw();
  const UserProfile* profile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_ansyCreateProfile_result__isset {
  _ProfileServices_ansyCreateProfile_result__isset() : success(false) {}
  bool success :1;
} _ProfileServices_ansyCreateProfile_result__isset;

class ProfileServices_ansyCreateProfile_result {
 public:

  ProfileServices_ansyCreateProfile_result(const ProfileServices_ansyCreateProfile_result&);
  ProfileServices_ansyCreateProfile_result& operator=(const ProfileServices_ansyCreateProfile_result&);
  ProfileServices_ansyCreateProfile_result() {
  }

  virtual ~ProfileServices_ansyCreateProfile_result() throw();
  CreateUserResult success;

  _ProfileServices_ansyCreateProfile_result__isset __isset;

  void __set_success(const CreateUserResult& val);

  bool operator == (const ProfileServices_ansyCreateProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_ansyCreateProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_ansyCreateProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_ansyCreateProfile_presult__isset {
  _ProfileServices_ansyCreateProfile_presult__isset() : success(false) {}
  bool success :1;
} _ProfileServices_ansyCreateProfile_presult__isset;

class ProfileServices_ansyCreateProfile_presult {
 public:


  virtual ~ProfileServices_ansyCreateProfile_presult() throw();
  CreateUserResult* success;

  _ProfileServices_ansyCreateProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ProfileServices_ansyUpdateProfile_args__isset {
  _ProfileServices_ansyUpdateProfile_args__isset() : profile(false), userId(false) {}
  bool profile :1;
  bool userId :1;
} _ProfileServices_ansyUpdateProfile_args__isset;

class ProfileServices_ansyUpdateProfile_args {
 public:

  ProfileServices_ansyUpdateProfile_args(const ProfileServices_ansyUpdateProfile_args&);
  ProfileServices_ansyUpdateProfile_args& operator=(const ProfileServices_ansyUpdateProfile_args&);
  ProfileServices_ansyUpdateProfile_args() : userId(0) {
  }

  virtual ~ProfileServices_ansyUpdateProfile_args() throw();
  UserProfile profile;
  int32_t userId;

  _ProfileServices_ansyUpdateProfile_args__isset __isset;

  void __set_profile(const UserProfile& val);

  void __set_userId(const int32_t val);

  bool operator == (const ProfileServices_ansyUpdateProfile_args & rhs) const
  {
    if (!(profile == rhs.profile))
      return false;
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_ansyUpdateProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_ansyUpdateProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProfileServices_ansyUpdateProfile_pargs {
 public:


  virtual ~ProfileServices_ansyUpdateProfile_pargs() throw();
  const UserProfile* profile;
  const int32_t* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_ansyUpdateProfile_result__isset {
  _ProfileServices_ansyUpdateProfile_result__isset() : success(false) {}
  bool success :1;
} _ProfileServices_ansyUpdateProfile_result__isset;

class ProfileServices_ansyUpdateProfile_result {
 public:

  ProfileServices_ansyUpdateProfile_result(const ProfileServices_ansyUpdateProfile_result&);
  ProfileServices_ansyUpdateProfile_result& operator=(const ProfileServices_ansyUpdateProfile_result&);
  ProfileServices_ansyUpdateProfile_result() : success((ErrorCode::type)0) {
  }

  virtual ~ProfileServices_ansyUpdateProfile_result() throw();
  ErrorCode::type success;

  _ProfileServices_ansyUpdateProfile_result__isset __isset;

  void __set_success(const ErrorCode::type val);

  bool operator == (const ProfileServices_ansyUpdateProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_ansyUpdateProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_ansyUpdateProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_ansyUpdateProfile_presult__isset {
  _ProfileServices_ansyUpdateProfile_presult__isset() : success(false) {}
  bool success :1;
} _ProfileServices_ansyUpdateProfile_presult__isset;

class ProfileServices_ansyUpdateProfile_presult {
 public:


  virtual ~ProfileServices_ansyUpdateProfile_presult() throw();
  ErrorCode::type* success;

  _ProfileServices_ansyUpdateProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ProfileServices_ansyDeleteProfile_args__isset {
  _ProfileServices_ansyDeleteProfile_args__isset() : userId(false) {}
  bool userId :1;
} _ProfileServices_ansyDeleteProfile_args__isset;

class ProfileServices_ansyDeleteProfile_args {
 public:

  ProfileServices_ansyDeleteProfile_args(const ProfileServices_ansyDeleteProfile_args&);
  ProfileServices_ansyDeleteProfile_args& operator=(const ProfileServices_ansyDeleteProfile_args&);
  ProfileServices_ansyDeleteProfile_args() : userId(0) {
  }

  virtual ~ProfileServices_ansyDeleteProfile_args() throw();
  int32_t userId;

  _ProfileServices_ansyDeleteProfile_args__isset __isset;

  void __set_userId(const int32_t val);

  bool operator == (const ProfileServices_ansyDeleteProfile_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_ansyDeleteProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_ansyDeleteProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProfileServices_ansyDeleteProfile_pargs {
 public:


  virtual ~ProfileServices_ansyDeleteProfile_pargs() throw();
  const int32_t* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_ansyDeleteProfile_result__isset {
  _ProfileServices_ansyDeleteProfile_result__isset() : success(false) {}
  bool success :1;
} _ProfileServices_ansyDeleteProfile_result__isset;

class ProfileServices_ansyDeleteProfile_result {
 public:

  ProfileServices_ansyDeleteProfile_result(const ProfileServices_ansyDeleteProfile_result&);
  ProfileServices_ansyDeleteProfile_result& operator=(const ProfileServices_ansyDeleteProfile_result&);
  ProfileServices_ansyDeleteProfile_result() : success((ErrorCode::type)0) {
  }

  virtual ~ProfileServices_ansyDeleteProfile_result() throw();
  ErrorCode::type success;

  _ProfileServices_ansyDeleteProfile_result__isset __isset;

  void __set_success(const ErrorCode::type val);

  bool operator == (const ProfileServices_ansyDeleteProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_ansyDeleteProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_ansyDeleteProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_ansyDeleteProfile_presult__isset {
  _ProfileServices_ansyDeleteProfile_presult__isset() : success(false) {}
  bool success :1;
} _ProfileServices_ansyDeleteProfile_presult__isset;

class ProfileServices_ansyDeleteProfile_presult {
 public:


  virtual ~ProfileServices_ansyDeleteProfile_presult() throw();
  ErrorCode::type* success;

  _ProfileServices_ansyDeleteProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ProfileServices_getList_args__isset {
  _ProfileServices_getList_args__isset() : ids(false) {}
  bool ids :1;
} _ProfileServices_getList_args__isset;

class ProfileServices_getList_args {
 public:

  ProfileServices_getList_args(const ProfileServices_getList_args&);
  ProfileServices_getList_args& operator=(const ProfileServices_getList_args&);
  ProfileServices_getList_args() {
  }

  virtual ~ProfileServices_getList_args() throw();
  std::vector<int32_t>  ids;

  _ProfileServices_getList_args__isset __isset;

  void __set_ids(const std::vector<int32_t> & val);

  bool operator == (const ProfileServices_getList_args & rhs) const
  {
    if (!(ids == rhs.ids))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_getList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_getList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProfileServices_getList_pargs {
 public:


  virtual ~ProfileServices_getList_pargs() throw();
  const std::vector<int32_t> * ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_getList_result__isset {
  _ProfileServices_getList_result__isset() : success(false) {}
  bool success :1;
} _ProfileServices_getList_result__isset;

class ProfileServices_getList_result {
 public:

  ProfileServices_getList_result(const ProfileServices_getList_result&);
  ProfileServices_getList_result& operator=(const ProfileServices_getList_result&);
  ProfileServices_getList_result() {
  }

  virtual ~ProfileServices_getList_result() throw();
  ListProfileResult success;

  _ProfileServices_getList_result__isset __isset;

  void __set_success(const ListProfileResult& val);

  bool operator == (const ProfileServices_getList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_getList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_getList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_getList_presult__isset {
  _ProfileServices_getList_presult__isset() : success(false) {}
  bool success :1;
} _ProfileServices_getList_presult__isset;

class ProfileServices_getList_presult {
 public:


  virtual ~ProfileServices_getList_presult() throw();
  ListProfileResult* success;

  _ProfileServices_getList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ProfileServices_GetIdByName_args__isset {
  _ProfileServices_GetIdByName_args__isset() : username(false) {}
  bool username :1;
} _ProfileServices_GetIdByName_args__isset;

class ProfileServices_GetIdByName_args {
 public:

  ProfileServices_GetIdByName_args(const ProfileServices_GetIdByName_args&);
  ProfileServices_GetIdByName_args& operator=(const ProfileServices_GetIdByName_args&);
  ProfileServices_GetIdByName_args() : username() {
  }

  virtual ~ProfileServices_GetIdByName_args() throw();
  std::string username;

  _ProfileServices_GetIdByName_args__isset __isset;

  void __set_username(const std::string& val);

  bool operator == (const ProfileServices_GetIdByName_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_GetIdByName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_GetIdByName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProfileServices_GetIdByName_pargs {
 public:


  virtual ~ProfileServices_GetIdByName_pargs() throw();
  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_GetIdByName_result__isset {
  _ProfileServices_GetIdByName_result__isset() : success(false) {}
  bool success :1;
} _ProfileServices_GetIdByName_result__isset;

class ProfileServices_GetIdByName_result {
 public:

  ProfileServices_GetIdByName_result(const ProfileServices_GetIdByName_result&);
  ProfileServices_GetIdByName_result& operator=(const ProfileServices_GetIdByName_result&);
  ProfileServices_GetIdByName_result() : success(0) {
  }

  virtual ~ProfileServices_GetIdByName_result() throw();
  int32_t success;

  _ProfileServices_GetIdByName_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const ProfileServices_GetIdByName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProfileServices_GetIdByName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProfileServices_GetIdByName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProfileServices_GetIdByName_presult__isset {
  _ProfileServices_GetIdByName_presult__isset() : success(false) {}
  bool success :1;
} _ProfileServices_GetIdByName_presult__isset;

class ProfileServices_GetIdByName_presult {
 public:


  virtual ~ProfileServices_GetIdByName_presult() throw();
  int32_t* success;

  _ProfileServices_GetIdByName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ProfileServicesClient : virtual public ProfileServicesIf {
 public:
  ProfileServicesClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ProfileServicesClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t Login(const std::string& username, const std::string& password);
  void send_Login(const std::string& username, const std::string& password);
  int32_t recv_Login();
  ErrorCode::type Logout(const int32_t userId);
  void send_Logout(const int32_t userId);
  ErrorCode::type recv_Logout();
  void CreateProfile(CreateUserResult& _return, const UserProfile& profile);
  void send_CreateProfile(const UserProfile& profile);
  void recv_CreateProfile(CreateUserResult& _return);
  void GetProfile(GetUserResult& _return, const int32_t userId);
  void send_GetProfile(const int32_t userId);
  void recv_GetProfile(GetUserResult& _return);
  ErrorCode::type UpdateProfile(const UserProfile& profile, const int32_t userId);
  void send_UpdateProfile(const UserProfile& profile, const int32_t userId);
  ErrorCode::type recv_UpdateProfile();
  ErrorCode::type DeleteProfile(const int32_t userId);
  void send_DeleteProfile(const int32_t userId);
  ErrorCode::type recv_DeleteProfile();
  void ansyCreateProfile(CreateUserResult& _return, const UserProfile& profile);
  void send_ansyCreateProfile(const UserProfile& profile);
  void recv_ansyCreateProfile(CreateUserResult& _return);
  ErrorCode::type ansyUpdateProfile(const UserProfile& profile, const int32_t userId);
  void send_ansyUpdateProfile(const UserProfile& profile, const int32_t userId);
  ErrorCode::type recv_ansyUpdateProfile();
  ErrorCode::type ansyDeleteProfile(const int32_t userId);
  void send_ansyDeleteProfile(const int32_t userId);
  ErrorCode::type recv_ansyDeleteProfile();
  void getList(ListProfileResult& _return, const std::vector<int32_t> & ids);
  void send_getList(const std::vector<int32_t> & ids);
  void recv_getList(ListProfileResult& _return);
  int32_t GetIdByName(const std::string& username);
  void send_GetIdByName(const std::string& username);
  int32_t recv_GetIdByName();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ProfileServicesProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ProfileServicesIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ProfileServicesProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Logout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreateProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ansyCreateProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ansyUpdateProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ansyDeleteProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetIdByName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ProfileServicesProcessor(boost::shared_ptr<ProfileServicesIf> iface) :
    iface_(iface) {
    processMap_["Login"] = &ProfileServicesProcessor::process_Login;
    processMap_["Logout"] = &ProfileServicesProcessor::process_Logout;
    processMap_["CreateProfile"] = &ProfileServicesProcessor::process_CreateProfile;
    processMap_["GetProfile"] = &ProfileServicesProcessor::process_GetProfile;
    processMap_["UpdateProfile"] = &ProfileServicesProcessor::process_UpdateProfile;
    processMap_["DeleteProfile"] = &ProfileServicesProcessor::process_DeleteProfile;
    processMap_["ansyCreateProfile"] = &ProfileServicesProcessor::process_ansyCreateProfile;
    processMap_["ansyUpdateProfile"] = &ProfileServicesProcessor::process_ansyUpdateProfile;
    processMap_["ansyDeleteProfile"] = &ProfileServicesProcessor::process_ansyDeleteProfile;
    processMap_["getList"] = &ProfileServicesProcessor::process_getList;
    processMap_["GetIdByName"] = &ProfileServicesProcessor::process_GetIdByName;
  }

  virtual ~ProfileServicesProcessor() {}
};

class ProfileServicesProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ProfileServicesProcessorFactory(const ::boost::shared_ptr< ProfileServicesIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ProfileServicesIfFactory > handlerFactory_;
};

class ProfileServicesMultiface : virtual public ProfileServicesIf {
 public:
  ProfileServicesMultiface(std::vector<boost::shared_ptr<ProfileServicesIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ProfileServicesMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ProfileServicesIf> > ifaces_;
  ProfileServicesMultiface() {}
  void add(boost::shared_ptr<ProfileServicesIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t Login(const std::string& username, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Login(username, password);
    }
    return ifaces_[i]->Login(username, password);
  }

  ErrorCode::type Logout(const int32_t userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Logout(userId);
    }
    return ifaces_[i]->Logout(userId);
  }

  void CreateProfile(CreateUserResult& _return, const UserProfile& profile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateProfile(_return, profile);
    }
    ifaces_[i]->CreateProfile(_return, profile);
    return;
  }

  void GetProfile(GetUserResult& _return, const int32_t userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetProfile(_return, userId);
    }
    ifaces_[i]->GetProfile(_return, userId);
    return;
  }

  ErrorCode::type UpdateProfile(const UserProfile& profile, const int32_t userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateProfile(profile, userId);
    }
    return ifaces_[i]->UpdateProfile(profile, userId);
  }

  ErrorCode::type DeleteProfile(const int32_t userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteProfile(userId);
    }
    return ifaces_[i]->DeleteProfile(userId);
  }

  void ansyCreateProfile(CreateUserResult& _return, const UserProfile& profile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ansyCreateProfile(_return, profile);
    }
    ifaces_[i]->ansyCreateProfile(_return, profile);
    return;
  }

  ErrorCode::type ansyUpdateProfile(const UserProfile& profile, const int32_t userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ansyUpdateProfile(profile, userId);
    }
    return ifaces_[i]->ansyUpdateProfile(profile, userId);
  }

  ErrorCode::type ansyDeleteProfile(const int32_t userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ansyDeleteProfile(userId);
    }
    return ifaces_[i]->ansyDeleteProfile(userId);
  }

  void getList(ListProfileResult& _return, const std::vector<int32_t> & ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getList(_return, ids);
    }
    ifaces_[i]->getList(_return, ids);
    return;
  }

  int32_t GetIdByName(const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetIdByName(username);
    }
    return ifaces_[i]->GetIdByName(username);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ProfileServicesConcurrentClient : virtual public ProfileServicesIf {
 public:
  ProfileServicesConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ProfileServicesConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t Login(const std::string& username, const std::string& password);
  int32_t send_Login(const std::string& username, const std::string& password);
  int32_t recv_Login(const int32_t seqid);
  ErrorCode::type Logout(const int32_t userId);
  int32_t send_Logout(const int32_t userId);
  ErrorCode::type recv_Logout(const int32_t seqid);
  void CreateProfile(CreateUserResult& _return, const UserProfile& profile);
  int32_t send_CreateProfile(const UserProfile& profile);
  void recv_CreateProfile(CreateUserResult& _return, const int32_t seqid);
  void GetProfile(GetUserResult& _return, const int32_t userId);
  int32_t send_GetProfile(const int32_t userId);
  void recv_GetProfile(GetUserResult& _return, const int32_t seqid);
  ErrorCode::type UpdateProfile(const UserProfile& profile, const int32_t userId);
  int32_t send_UpdateProfile(const UserProfile& profile, const int32_t userId);
  ErrorCode::type recv_UpdateProfile(const int32_t seqid);
  ErrorCode::type DeleteProfile(const int32_t userId);
  int32_t send_DeleteProfile(const int32_t userId);
  ErrorCode::type recv_DeleteProfile(const int32_t seqid);
  void ansyCreateProfile(CreateUserResult& _return, const UserProfile& profile);
  int32_t send_ansyCreateProfile(const UserProfile& profile);
  void recv_ansyCreateProfile(CreateUserResult& _return, const int32_t seqid);
  ErrorCode::type ansyUpdateProfile(const UserProfile& profile, const int32_t userId);
  int32_t send_ansyUpdateProfile(const UserProfile& profile, const int32_t userId);
  ErrorCode::type recv_ansyUpdateProfile(const int32_t seqid);
  ErrorCode::type ansyDeleteProfile(const int32_t userId);
  int32_t send_ansyDeleteProfile(const int32_t userId);
  ErrorCode::type recv_ansyDeleteProfile(const int32_t seqid);
  void getList(ListProfileResult& _return, const std::vector<int32_t> & ids);
  int32_t send_getList(const std::vector<int32_t> & ids);
  void recv_getList(ListProfileResult& _return, const int32_t seqid);
  int32_t GetIdByName(const std::string& username);
  int32_t send_GetIdByName(const std::string& username);
  int32_t recv_GetIdByName(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
