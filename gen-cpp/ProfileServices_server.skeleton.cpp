// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ProfileServices.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class ProfileServicesHandler : virtual public ProfileServicesIf {
 public:
  ProfileServicesHandler() {
    // Your initialization goes here
  }

  void Login(loginResult& _return, const std::string& username, const std::string& password) {
    // Your implementation goes here
    printf("Login\n");
  }

  ErrorCode::type Logout(const int32_t userId) {
    // Your implementation goes here
    printf("Logout\n");
  }

  void LoginById(loginResult& _return, const int32_t userId) {
    // Your implementation goes here
    printf("LoginById\n");
  }

  void CreateProfile(CreateUserResult& _return, const UserProfile& profile) {
    // Your implementation goes here
    printf("CreateProfile\n");
  }

  void GetProfile(GetUserResult& _return, const int32_t userId) {
    // Your implementation goes here
    printf("GetProfile\n");
  }

  ErrorCode::type UpdateProfile(const UserProfile& profile, const int32_t userId) {
    // Your implementation goes here
    printf("UpdateProfile\n");
  }

  ErrorCode::type DeleteProfile(const int32_t userId) {
    // Your implementation goes here
    printf("DeleteProfile\n");
  }

  void ansyCreateProfile(CreateUserResult& _return, const UserProfile& profile) {
    // Your implementation goes here
    printf("ansyCreateProfile\n");
  }

  ErrorCode::type ansyUpdateProfile(const UserProfile& profile, const int32_t userId) {
    // Your implementation goes here
    printf("ansyUpdateProfile\n");
  }

  ErrorCode::type ansyDeleteProfile(const int32_t userId) {
    // Your implementation goes here
    printf("ansyDeleteProfile\n");
  }

  void getList(ListProfileResult& _return, const std::vector<int32_t> & ids) {
    // Your implementation goes here
    printf("getList\n");
  }

  int32_t GetIdByName(const std::string& username) {
    // Your implementation goes here
    printf("GetIdByName\n");
  }

  bool chechExist(const int32_t userId) {
    // Your implementation goes here
    printf("chechExist\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ProfileServicesHandler> handler(new ProfileServicesHandler());
  shared_ptr<TProcessor> processor(new ProfileServicesProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

