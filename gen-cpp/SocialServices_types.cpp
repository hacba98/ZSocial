/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "SocialServices_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kErrorCodeValues[] = {
  ErrorCode::SUCCESS,
  ErrorCode::USER_NOT_FOUND,
  ErrorCode::INVALID_PARAMETER,
  ErrorCode::INVALID_SERVICE,
  ErrorCode::INTERNAL_ERROR,
  ErrorCode::DUPLICATED_REQUEST,
  ErrorCode::OUT_OF_RANGE
};
const char* _kErrorCodeNames[] = {
  "SUCCESS",
  "USER_NOT_FOUND",
  "INVALID_PARAMETER",
  "INVALID_SERVICE",
  "INTERNAL_ERROR",
  "DUPLICATED_REQUEST",
  "OUT_OF_RANGE"
};
const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kErrorCodeValues, _kErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


UserProfile::~UserProfile() throw() {
}


void UserProfile::__set_id(const int32_t val) {
  this->id = val;
}

void UserProfile::__set_name(const std::string& val) {
  this->name = val;
}

void UserProfile::__set_birth(const int32_t val) {
  this->birth = val;
}

void UserProfile::__set_gender(const bool val) {
  this->gender = val;
}

void UserProfile::__set_username(const std::string& val) {
  this->username = val;
}

void UserProfile::__set_password(const std::string& val) {
  this->password = val;
}

void UserProfile::__set_phoneNumber(const int64_t val) {
  this->phoneNumber = val;
}

void UserProfile::__set_join_date(const int32_t val) {
  this->join_date = val;
}

void UserProfile::__set_last_active_time(const int32_t val) {
  this->last_active_time = val;
}

uint32_t UserProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->birth);
          this->__isset.birth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->gender);
          this->__isset.gender = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->phoneNumber);
          this->__isset.phoneNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->join_date);
          this->__isset.join_date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->last_active_time);
          this->__isset.last_active_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserProfile");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("birth", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->birth);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gender", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->gender);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phoneNumber", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->phoneNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("join_date", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->join_date);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_active_time", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->last_active_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserProfile &a, UserProfile &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.birth, b.birth);
  swap(a.gender, b.gender);
  swap(a.username, b.username);
  swap(a.password, b.password);
  swap(a.phoneNumber, b.phoneNumber);
  swap(a.join_date, b.join_date);
  swap(a.last_active_time, b.last_active_time);
  swap(a.__isset, b.__isset);
}

UserProfile::UserProfile(const UserProfile& other0) {
  id = other0.id;
  name = other0.name;
  birth = other0.birth;
  gender = other0.gender;
  username = other0.username;
  password = other0.password;
  phoneNumber = other0.phoneNumber;
  join_date = other0.join_date;
  last_active_time = other0.last_active_time;
  __isset = other0.__isset;
}
UserProfile& UserProfile::operator=(const UserProfile& other1) {
  id = other1.id;
  name = other1.name;
  birth = other1.birth;
  gender = other1.gender;
  username = other1.username;
  password = other1.password;
  phoneNumber = other1.phoneNumber;
  join_date = other1.join_date;
  last_active_time = other1.last_active_time;
  __isset = other1.__isset;
  return *this;
}
void UserProfile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserProfile(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "birth=" << to_string(birth);
  out << ", " << "gender=" << to_string(gender);
  out << ", " << "username=" << to_string(username);
  out << ", " << "password=" << to_string(password);
  out << ", " << "phoneNumber=" << to_string(phoneNumber);
  out << ", " << "join_date=" << to_string(join_date);
  out << ", " << "last_active_time=" << to_string(last_active_time);
  out << ")";
}


SimpleProfile::~SimpleProfile() throw() {
}


void SimpleProfile::__set_id(const int32_t val) {
  this->id = val;
}

void SimpleProfile::__set_name(const std::string& val) {
  this->name = val;
}

void SimpleProfile::__set_gender(const bool val) {
  this->gender = val;
}

void SimpleProfile::__set_last_active_time(const int32_t val) {
  this->last_active_time = val;
}

uint32_t SimpleProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->gender);
          this->__isset.gender = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->last_active_time);
          this->__isset.last_active_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SimpleProfile");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gender", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->gender);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_active_time", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->last_active_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SimpleProfile &a, SimpleProfile &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.gender, b.gender);
  swap(a.last_active_time, b.last_active_time);
  swap(a.__isset, b.__isset);
}

SimpleProfile::SimpleProfile(const SimpleProfile& other2) {
  id = other2.id;
  name = other2.name;
  gender = other2.gender;
  last_active_time = other2.last_active_time;
  __isset = other2.__isset;
}
SimpleProfile& SimpleProfile::operator=(const SimpleProfile& other3) {
  id = other3.id;
  name = other3.name;
  gender = other3.gender;
  last_active_time = other3.last_active_time;
  __isset = other3.__isset;
  return *this;
}
void SimpleProfile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SimpleProfile(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "gender=" << to_string(gender);
  out << ", " << "last_active_time=" << to_string(last_active_time);
  out << ")";
}


CreateUserResult::~CreateUserResult() throw() {
}


void CreateUserResult::__set_errorCode(const ErrorCode::type val) {
  this->errorCode = val;
}

void CreateUserResult::__set_id(const int32_t val) {
  this->id = val;
}

uint32_t CreateUserResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->errorCode = (ErrorCode::type)ecast4;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateUserResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateUserResult");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateUserResult &a, CreateUserResult &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

CreateUserResult::CreateUserResult(const CreateUserResult& other5) {
  errorCode = other5.errorCode;
  id = other5.id;
  __isset = other5.__isset;
}
CreateUserResult& CreateUserResult::operator=(const CreateUserResult& other6) {
  errorCode = other6.errorCode;
  id = other6.id;
  __isset = other6.__isset;
  return *this;
}
void CreateUserResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateUserResult(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "id=" << to_string(id);
  out << ")";
}


GetUserResult::~GetUserResult() throw() {
}


void GetUserResult::__set_errorCode(const ErrorCode::type val) {
  this->errorCode = val;
}

void GetUserResult::__set_profile(const UserProfile& val) {
  this->profile = val;
}

uint32_t GetUserResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->errorCode = (ErrorCode::type)ecast7;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->profile.read(iprot);
          this->__isset.profile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetUserResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetUserResult");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("profile", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->profile.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetUserResult &a, GetUserResult &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.profile, b.profile);
  swap(a.__isset, b.__isset);
}

GetUserResult::GetUserResult(const GetUserResult& other8) {
  errorCode = other8.errorCode;
  profile = other8.profile;
  __isset = other8.__isset;
}
GetUserResult& GetUserResult::operator=(const GetUserResult& other9) {
  errorCode = other9.errorCode;
  profile = other9.profile;
  __isset = other9.__isset;
  return *this;
}
void GetUserResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetUserResult(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "profile=" << to_string(profile);
  out << ")";
}


ListProfileResult::~ListProfileResult() throw() {
}


void ListProfileResult::__set_errorCode(const ErrorCode::type val) {
  this->errorCode = val;
}

void ListProfileResult::__set_profiles(const std::vector<SimpleProfile> & val) {
  this->profiles = val;
}

uint32_t ListProfileResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->errorCode = (ErrorCode::type)ecast10;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->profiles.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _etype14;
            xfer += iprot->readListBegin(_etype14, _size11);
            this->profiles.resize(_size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              xfer += this->profiles[_i15].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.profiles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListProfileResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ListProfileResult");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("profiles", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->profiles.size()));
    std::vector<SimpleProfile> ::const_iterator _iter16;
    for (_iter16 = this->profiles.begin(); _iter16 != this->profiles.end(); ++_iter16)
    {
      xfer += (*_iter16).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ListProfileResult &a, ListProfileResult &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.profiles, b.profiles);
  swap(a.__isset, b.__isset);
}

ListProfileResult::ListProfileResult(const ListProfileResult& other17) {
  errorCode = other17.errorCode;
  profiles = other17.profiles;
  __isset = other17.__isset;
}
ListProfileResult& ListProfileResult::operator=(const ListProfileResult& other18) {
  errorCode = other18.errorCode;
  profiles = other18.profiles;
  __isset = other18.__isset;
  return *this;
}
void ListProfileResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListProfileResult(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "profiles=" << to_string(profiles);
  out << ")";
}


FriendList::~FriendList() throw() {
}


void FriendList::__set_size(const int32_t val) {
  this->size = val;
}

void FriendList::__set_data(const std::set<int32_t> & val) {
  this->data = val;
}

uint32_t FriendList::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->data.clear();
            uint32_t _size19;
            ::apache::thrift::protocol::TType _etype22;
            xfer += iprot->readSetBegin(_etype22, _size19);
            uint32_t _i23;
            for (_i23 = 0; _i23 < _size19; ++_i23)
            {
              int32_t _elem24;
              xfer += iprot->readI32(_elem24);
              this->data.insert(_elem24);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FriendList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FriendList");

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->data.size()));
    std::set<int32_t> ::const_iterator _iter25;
    for (_iter25 = this->data.begin(); _iter25 != this->data.end(); ++_iter25)
    {
      xfer += oprot->writeI32((*_iter25));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FriendList &a, FriendList &b) {
  using ::std::swap;
  swap(a.size, b.size);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

FriendList::FriendList(const FriendList& other26) {
  size = other26.size;
  data = other26.data;
  __isset = other26.__isset;
}
FriendList& FriendList::operator=(const FriendList& other27) {
  size = other27.size;
  data = other27.data;
  __isset = other27.__isset;
  return *this;
}
void FriendList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FriendList(";
  out << "size=" << to_string(size);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


PendingRequest::~PendingRequest() throw() {
}


void PendingRequest::__set_size(const int32_t val) {
  this->size = val;
}

void PendingRequest::__set_data(const std::set<int32_t> & val) {
  this->data = val;
}

uint32_t PendingRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->data.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readSetBegin(_etype31, _size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              int32_t _elem33;
              xfer += iprot->readI32(_elem33);
              this->data.insert(_elem33);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PendingRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PendingRequest");

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->data.size()));
    std::set<int32_t> ::const_iterator _iter34;
    for (_iter34 = this->data.begin(); _iter34 != this->data.end(); ++_iter34)
    {
      xfer += oprot->writeI32((*_iter34));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PendingRequest &a, PendingRequest &b) {
  using ::std::swap;
  swap(a.size, b.size);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

PendingRequest::PendingRequest(const PendingRequest& other35) {
  size = other35.size;
  data = other35.data;
  __isset = other35.__isset;
}
PendingRequest& PendingRequest::operator=(const PendingRequest& other36) {
  size = other36.size;
  data = other36.data;
  __isset = other36.__isset;
  return *this;
}
void PendingRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PendingRequest(";
  out << "size=" << to_string(size);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


FriendRequest::~FriendRequest() throw() {
}


void FriendRequest::__set_p_send_req(const int32_t val) {
  this->p_send_req = val;
}

void FriendRequest::__set_p_recv_req(const int32_t val) {
  this->p_recv_req = val;
}

void FriendRequest::__set_greeting(const std::string& val) {
  this->greeting = val;
}

void FriendRequest::__set_time(const int32_t val) {
  this->time = val;
}

void FriendRequest::__set_id(const int32_t val) {
  this->id = val;
}

uint32_t FriendRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->p_send_req);
          this->__isset.p_send_req = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->p_recv_req);
          this->__isset.p_recv_req = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->greeting);
          this->__isset.greeting = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FriendRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FriendRequest");

  xfer += oprot->writeFieldBegin("p_send_req", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->p_send_req);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p_recv_req", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->p_recv_req);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("greeting", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->greeting);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FriendRequest &a, FriendRequest &b) {
  using ::std::swap;
  swap(a.p_send_req, b.p_send_req);
  swap(a.p_recv_req, b.p_recv_req);
  swap(a.greeting, b.greeting);
  swap(a.time, b.time);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

FriendRequest::FriendRequest(const FriendRequest& other37) {
  p_send_req = other37.p_send_req;
  p_recv_req = other37.p_recv_req;
  greeting = other37.greeting;
  time = other37.time;
  id = other37.id;
  __isset = other37.__isset;
}
FriendRequest& FriendRequest::operator=(const FriendRequest& other38) {
  p_send_req = other38.p_send_req;
  p_recv_req = other38.p_recv_req;
  greeting = other38.greeting;
  time = other38.time;
  id = other38.id;
  __isset = other38.__isset;
  return *this;
}
void FriendRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FriendRequest(";
  out << "p_send_req=" << to_string(p_send_req);
  out << ", " << "p_recv_req=" << to_string(p_recv_req);
  out << ", " << "greeting=" << to_string(greeting);
  out << ", " << "time=" << to_string(time);
  out << ", " << "id=" << to_string(id);
  out << ")";
}


FriendData::~FriendData() throw() {
}


void FriendData::__set_id(const int32_t val) {
  this->id = val;
}

void FriendData::__set_name(const std::string& val) {
  this->name = val;
}

void FriendData::__set_isMale(const bool val) {
  this->isMale = val;
}

uint32_t FriendData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isMale);
          this->__isset.isMale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FriendData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FriendData");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isMale", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->isMale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FriendData &a, FriendData &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.isMale, b.isMale);
  swap(a.__isset, b.__isset);
}

FriendData::FriendData(const FriendData& other39) {
  id = other39.id;
  name = other39.name;
  isMale = other39.isMale;
  __isset = other39.__isset;
}
FriendData& FriendData::operator=(const FriendData& other40) {
  id = other40.id;
  name = other40.name;
  isMale = other40.isMale;
  __isset = other40.__isset;
  return *this;
}
void FriendData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FriendData(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "isMale=" << to_string(isMale);
  out << ")";
}


pingResult::~pingResult() throw() {
}


void pingResult::__set_haveData(const bool val) {
  this->haveData = val;
}

void pingResult::__set_data(const std::vector<FriendRequest> & val) {
  this->data = val;
}

uint32_t pingResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->haveData);
          this->__isset.haveData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->data.clear();
            uint32_t _size41;
            ::apache::thrift::protocol::TType _etype44;
            xfer += iprot->readListBegin(_etype44, _size41);
            this->data.resize(_size41);
            uint32_t _i45;
            for (_i45 = 0; _i45 < _size41; ++_i45)
            {
              xfer += this->data[_i45].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t pingResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("pingResult");

  xfer += oprot->writeFieldBegin("haveData", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->haveData);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->data.size()));
    std::vector<FriendRequest> ::const_iterator _iter46;
    for (_iter46 = this->data.begin(); _iter46 != this->data.end(); ++_iter46)
    {
      xfer += (*_iter46).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(pingResult &a, pingResult &b) {
  using ::std::swap;
  swap(a.haveData, b.haveData);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

pingResult::pingResult(const pingResult& other47) {
  haveData = other47.haveData;
  data = other47.data;
  __isset = other47.__isset;
}
pingResult& pingResult::operator=(const pingResult& other48) {
  haveData = other48.haveData;
  data = other48.data;
  __isset = other48.__isset;
  return *this;
}
void pingResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "pingResult(";
  out << "haveData=" << to_string(haveData);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


listFriendResult::~listFriendResult() throw() {
}


void listFriendResult::__set_size(const int32_t val) {
  this->size = val;
}

void listFriendResult::__set_idx(const int32_t val) {
  this->idx = val;
}

void listFriendResult::__set_friendList(const std::vector<FriendData> & val) {
  this->friendList = val;
}

void listFriendResult::__set_code(const ErrorCode::type val) {
  this->code = val;
}

uint32_t listFriendResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idx);
          this->__isset.idx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->friendList.clear();
            uint32_t _size49;
            ::apache::thrift::protocol::TType _etype52;
            xfer += iprot->readListBegin(_etype52, _size49);
            this->friendList.resize(_size49);
            uint32_t _i53;
            for (_i53 = 0; _i53 < _size49; ++_i53)
            {
<<<<<<< HEAD
              xfer += iprot->readI32(this->friendList[_i53]);
=======
              xfer += this->friendList[_i53].read(iprot);
>>>>>>> 0a22f0241ab0dfa5948c585028038c813591580f
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.friendList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast54;
          xfer += iprot->readI32(ecast54);
          this->code = (ErrorCode::type)ecast54;
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t listFriendResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("listFriendResult");

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idx", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->idx);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendList", ::apache::thrift::protocol::T_LIST, 3);
  {
<<<<<<< HEAD
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->friendList.size()));
    std::vector<int32_t> ::const_iterator _iter55;
    for (_iter55 = this->friendList.begin(); _iter55 != this->friendList.end(); ++_iter55)
    {
      xfer += oprot->writeI32((*_iter55));
=======
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->friendList.size()));
    std::vector<FriendData> ::const_iterator _iter55;
    for (_iter55 = this->friendList.begin(); _iter55 != this->friendList.end(); ++_iter55)
    {
      xfer += (*_iter55).write(oprot);
>>>>>>> 0a22f0241ab0dfa5948c585028038c813591580f
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(listFriendResult &a, listFriendResult &b) {
  using ::std::swap;
  swap(a.size, b.size);
  swap(a.idx, b.idx);
  swap(a.friendList, b.friendList);
  swap(a.code, b.code);
  swap(a.__isset, b.__isset);
}

listFriendResult::listFriendResult(const listFriendResult& other56) {
  size = other56.size;
  idx = other56.idx;
  friendList = other56.friendList;
  code = other56.code;
  __isset = other56.__isset;
}
listFriendResult& listFriendResult::operator=(const listFriendResult& other57) {
  size = other57.size;
  idx = other57.idx;
  friendList = other57.friendList;
  code = other57.code;
  __isset = other57.__isset;
  return *this;
}
void listFriendResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "listFriendResult(";
  out << "size=" << to_string(size);
  out << ", " << "idx=" << to_string(idx);
  out << ", " << "friendList=" << to_string(friendList);
  out << ", " << "code=" << to_string(code);
  out << ")";
}


loginResult::~loginResult() throw() {
}


void loginResult::__set_code(const ErrorCode::type val) {
  this->code = val;
}

void loginResult::__set_profile(const SimpleProfile& val) {
  this->profile = val;
}

uint32_t loginResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast58;
          xfer += iprot->readI32(ecast58);
          this->code = (ErrorCode::type)ecast58;
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->profile.read(iprot);
          this->__isset.profile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t loginResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("loginResult");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("profile", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->profile.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(loginResult &a, loginResult &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.profile, b.profile);
  swap(a.__isset, b.__isset);
}

loginResult::loginResult(const loginResult& other59) {
  code = other59.code;
  profile = other59.profile;
  __isset = other59.__isset;
}
loginResult& loginResult::operator=(const loginResult& other60) {
  code = other60.code;
  profile = other60.profile;
  __isset = other60.__isset;
  return *this;
}
void loginResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "loginResult(";
  out << "code=" << to_string(code);
  out << ", " << "profile=" << to_string(profile);
  out << ")";
}


