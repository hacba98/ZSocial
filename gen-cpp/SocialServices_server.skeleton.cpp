// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "SocialServices.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class SocialServicesHandler : virtual public SocialServicesIf {
 public:
  SocialServicesHandler() {
    // Your initialization goes here
  }

  int32_t Login(const std::string& username, const std::string& password) {
    // Your implementation goes here
    printf("Login\n");
  }

  ErrorCode::type Logout(const int32_t userId) {
    // Your implementation goes here
    printf("Logout\n");
  }

  void CreateProfile(CreateUserResult& _return, const UserProfile& profile) {
    // Your implementation goes here
    printf("CreateProfile\n");
  }

  void GetProfile(GetUserResult& _return, const int32_t userId) {
    // Your implementation goes here
    printf("GetProfile\n");
  }

  ErrorCode::type UpdateProfile(const UserProfile& profile, const int32_t userId) {
    // Your implementation goes here
    printf("UpdateProfile\n");
  }

  ErrorCode::type DeleteProfile(const int32_t userId) {
    // Your implementation goes here
    printf("DeleteProfile\n");
  }

  void ansyCreateProfile(CreateUserResult& _return, const UserProfile& profile) {
    // Your implementation goes here
    printf("ansyCreateProfile\n");
  }

  ErrorCode::type ansyUpdateProfile(const UserProfile& profile, const int32_t userId) {
    // Your implementation goes here
    printf("ansyUpdateProfile\n");
  }

  ErrorCode::type ansyDeleteProfile(const int32_t userId) {
    // Your implementation goes here
    printf("ansyDeleteProfile\n");
  }

  void getList(ListProfileResult& _return, const std::vector<int32_t> & ids) {
    // Your implementation goes here
    printf("getList\n");
  }

  int32_t GetIdByName(const std::string& username) {
    // Your implementation goes here
    printf("GetIdByName\n");
  }

  void checkRequest(pingResult& _return, const int32_t id) {
    // Your implementation goes here
    printf("checkRequest\n");
  }

  ErrorCode::type addFriend(const FriendRequest& request) {
    // Your implementation goes here
    printf("addFriend\n");
  }

  ErrorCode::type acceptRequest(const int32_t curId, const int32_t requestId) {
    // Your implementation goes here
    printf("acceptRequest\n");
  }

  ErrorCode::type declineRequest(const int32_t curId, const int32_t requestId) {
    // Your implementation goes here
    printf("declineRequest\n");
  }

  ErrorCode::type removeFriend(const int32_t curId, const int32_t friendId) {
    // Your implementation goes here
    printf("removeFriend\n");
  }

  void viewFriendList(listFriendResult& _return, const int32_t id, const int32_t index, const int32_t size) {
    // Your implementation goes here
    printf("viewFriendList\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<SocialServicesHandler> handler(new SocialServicesHandler());
  shared_ptr<TProcessor> processor(new SocialServicesProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

