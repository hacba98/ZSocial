/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NewsFeedService_H
#define NewsFeedService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "SocialServices_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class NewsFeedServiceIf {
 public:
  virtual ~NewsFeedServiceIf() {}
  virtual void createNewsFeed(FeedCreateResult& _return, const int32_t owner, const std::string& content, const int8_t status) = 0;
  virtual void updateNewsFeed(FeedUpdateResult& _return, const int32_t id, const std::string& content, const int8_t status) = 0;
  virtual void deleteNewsFeed(FeedDeleteResult& _return, const int32_t id, const int32_t owner) = 0;
  virtual void getFeed(FeedResult& _return, const int32_t id) = 0;
  virtual void getFeedCount(FeedCountResult& _return, const int32_t owner) = 0;
  virtual void getListFeed(ListFeedResult& _return, const int32_t owner, const Item& post, const int32_t count) = 0;
};

class NewsFeedServiceIfFactory {
 public:
  typedef NewsFeedServiceIf Handler;

  virtual ~NewsFeedServiceIfFactory() {}

  virtual NewsFeedServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(NewsFeedServiceIf* /* handler */) = 0;
};

class NewsFeedServiceIfSingletonFactory : virtual public NewsFeedServiceIfFactory {
 public:
  NewsFeedServiceIfSingletonFactory(const boost::shared_ptr<NewsFeedServiceIf>& iface) : iface_(iface) {}
  virtual ~NewsFeedServiceIfSingletonFactory() {}

  virtual NewsFeedServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(NewsFeedServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<NewsFeedServiceIf> iface_;
};

class NewsFeedServiceNull : virtual public NewsFeedServiceIf {
 public:
  virtual ~NewsFeedServiceNull() {}
  void createNewsFeed(FeedCreateResult& /* _return */, const int32_t /* owner */, const std::string& /* content */, const int8_t /* status */) {
    return;
  }
  void updateNewsFeed(FeedUpdateResult& /* _return */, const int32_t /* id */, const std::string& /* content */, const int8_t /* status */) {
    return;
  }
  void deleteNewsFeed(FeedDeleteResult& /* _return */, const int32_t /* id */, const int32_t /* owner */) {
    return;
  }
  void getFeed(FeedResult& /* _return */, const int32_t /* id */) {
    return;
  }
  void getFeedCount(FeedCountResult& /* _return */, const int32_t /* owner */) {
    return;
  }
  void getListFeed(ListFeedResult& /* _return */, const int32_t /* owner */, const Item& /* post */, const int32_t /* count */) {
    return;
  }
};

typedef struct _NewsFeedService_createNewsFeed_args__isset {
  _NewsFeedService_createNewsFeed_args__isset() : owner(false), content(false), status(false) {}
  bool owner :1;
  bool content :1;
  bool status :1;
} _NewsFeedService_createNewsFeed_args__isset;

class NewsFeedService_createNewsFeed_args {
 public:

  NewsFeedService_createNewsFeed_args(const NewsFeedService_createNewsFeed_args&);
  NewsFeedService_createNewsFeed_args& operator=(const NewsFeedService_createNewsFeed_args&);
  NewsFeedService_createNewsFeed_args() : owner(0), content(), status(0) {
  }

  virtual ~NewsFeedService_createNewsFeed_args() throw();
  int32_t owner;
  std::string content;
  int8_t status;

  _NewsFeedService_createNewsFeed_args__isset __isset;

  void __set_owner(const int32_t val);

  void __set_content(const std::string& val);

  void __set_status(const int8_t val);

  bool operator == (const NewsFeedService_createNewsFeed_args & rhs) const
  {
    if (!(owner == rhs.owner))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const NewsFeedService_createNewsFeed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NewsFeedService_createNewsFeed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NewsFeedService_createNewsFeed_pargs {
 public:


  virtual ~NewsFeedService_createNewsFeed_pargs() throw();
  const int32_t* owner;
  const std::string* content;
  const int8_t* status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NewsFeedService_createNewsFeed_result__isset {
  _NewsFeedService_createNewsFeed_result__isset() : success(false) {}
  bool success :1;
} _NewsFeedService_createNewsFeed_result__isset;

class NewsFeedService_createNewsFeed_result {
 public:

  NewsFeedService_createNewsFeed_result(const NewsFeedService_createNewsFeed_result&);
  NewsFeedService_createNewsFeed_result& operator=(const NewsFeedService_createNewsFeed_result&);
  NewsFeedService_createNewsFeed_result() {
  }

  virtual ~NewsFeedService_createNewsFeed_result() throw();
  FeedCreateResult success;

  _NewsFeedService_createNewsFeed_result__isset __isset;

  void __set_success(const FeedCreateResult& val);

  bool operator == (const NewsFeedService_createNewsFeed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NewsFeedService_createNewsFeed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NewsFeedService_createNewsFeed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NewsFeedService_createNewsFeed_presult__isset {
  _NewsFeedService_createNewsFeed_presult__isset() : success(false) {}
  bool success :1;
} _NewsFeedService_createNewsFeed_presult__isset;

class NewsFeedService_createNewsFeed_presult {
 public:


  virtual ~NewsFeedService_createNewsFeed_presult() throw();
  FeedCreateResult* success;

  _NewsFeedService_createNewsFeed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NewsFeedService_updateNewsFeed_args__isset {
  _NewsFeedService_updateNewsFeed_args__isset() : id(false), content(false), status(false) {}
  bool id :1;
  bool content :1;
  bool status :1;
} _NewsFeedService_updateNewsFeed_args__isset;

class NewsFeedService_updateNewsFeed_args {
 public:

  NewsFeedService_updateNewsFeed_args(const NewsFeedService_updateNewsFeed_args&);
  NewsFeedService_updateNewsFeed_args& operator=(const NewsFeedService_updateNewsFeed_args&);
  NewsFeedService_updateNewsFeed_args() : id(0), content(), status(0) {
  }

  virtual ~NewsFeedService_updateNewsFeed_args() throw();
  int32_t id;
  std::string content;
  int8_t status;

  _NewsFeedService_updateNewsFeed_args__isset __isset;

  void __set_id(const int32_t val);

  void __set_content(const std::string& val);

  void __set_status(const int8_t val);

  bool operator == (const NewsFeedService_updateNewsFeed_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const NewsFeedService_updateNewsFeed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NewsFeedService_updateNewsFeed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NewsFeedService_updateNewsFeed_pargs {
 public:


  virtual ~NewsFeedService_updateNewsFeed_pargs() throw();
  const int32_t* id;
  const std::string* content;
  const int8_t* status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NewsFeedService_updateNewsFeed_result__isset {
  _NewsFeedService_updateNewsFeed_result__isset() : success(false) {}
  bool success :1;
} _NewsFeedService_updateNewsFeed_result__isset;

class NewsFeedService_updateNewsFeed_result {
 public:

  NewsFeedService_updateNewsFeed_result(const NewsFeedService_updateNewsFeed_result&);
  NewsFeedService_updateNewsFeed_result& operator=(const NewsFeedService_updateNewsFeed_result&);
  NewsFeedService_updateNewsFeed_result() {
  }

  virtual ~NewsFeedService_updateNewsFeed_result() throw();
  FeedUpdateResult success;

  _NewsFeedService_updateNewsFeed_result__isset __isset;

  void __set_success(const FeedUpdateResult& val);

  bool operator == (const NewsFeedService_updateNewsFeed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NewsFeedService_updateNewsFeed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NewsFeedService_updateNewsFeed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NewsFeedService_updateNewsFeed_presult__isset {
  _NewsFeedService_updateNewsFeed_presult__isset() : success(false) {}
  bool success :1;
} _NewsFeedService_updateNewsFeed_presult__isset;

class NewsFeedService_updateNewsFeed_presult {
 public:


  virtual ~NewsFeedService_updateNewsFeed_presult() throw();
  FeedUpdateResult* success;

  _NewsFeedService_updateNewsFeed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NewsFeedService_deleteNewsFeed_args__isset {
  _NewsFeedService_deleteNewsFeed_args__isset() : id(false), owner(false) {}
  bool id :1;
  bool owner :1;
} _NewsFeedService_deleteNewsFeed_args__isset;

class NewsFeedService_deleteNewsFeed_args {
 public:

  NewsFeedService_deleteNewsFeed_args(const NewsFeedService_deleteNewsFeed_args&);
  NewsFeedService_deleteNewsFeed_args& operator=(const NewsFeedService_deleteNewsFeed_args&);
  NewsFeedService_deleteNewsFeed_args() : id(0), owner(0) {
  }

  virtual ~NewsFeedService_deleteNewsFeed_args() throw();
  int32_t id;
  int32_t owner;

  _NewsFeedService_deleteNewsFeed_args__isset __isset;

  void __set_id(const int32_t val);

  void __set_owner(const int32_t val);

  bool operator == (const NewsFeedService_deleteNewsFeed_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(owner == rhs.owner))
      return false;
    return true;
  }
  bool operator != (const NewsFeedService_deleteNewsFeed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NewsFeedService_deleteNewsFeed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NewsFeedService_deleteNewsFeed_pargs {
 public:


  virtual ~NewsFeedService_deleteNewsFeed_pargs() throw();
  const int32_t* id;
  const int32_t* owner;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NewsFeedService_deleteNewsFeed_result__isset {
  _NewsFeedService_deleteNewsFeed_result__isset() : success(false) {}
  bool success :1;
} _NewsFeedService_deleteNewsFeed_result__isset;

class NewsFeedService_deleteNewsFeed_result {
 public:

  NewsFeedService_deleteNewsFeed_result(const NewsFeedService_deleteNewsFeed_result&);
  NewsFeedService_deleteNewsFeed_result& operator=(const NewsFeedService_deleteNewsFeed_result&);
  NewsFeedService_deleteNewsFeed_result() {
  }

  virtual ~NewsFeedService_deleteNewsFeed_result() throw();
  FeedDeleteResult success;

  _NewsFeedService_deleteNewsFeed_result__isset __isset;

  void __set_success(const FeedDeleteResult& val);

  bool operator == (const NewsFeedService_deleteNewsFeed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NewsFeedService_deleteNewsFeed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NewsFeedService_deleteNewsFeed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NewsFeedService_deleteNewsFeed_presult__isset {
  _NewsFeedService_deleteNewsFeed_presult__isset() : success(false) {}
  bool success :1;
} _NewsFeedService_deleteNewsFeed_presult__isset;

class NewsFeedService_deleteNewsFeed_presult {
 public:


  virtual ~NewsFeedService_deleteNewsFeed_presult() throw();
  FeedDeleteResult* success;

  _NewsFeedService_deleteNewsFeed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NewsFeedService_getFeed_args__isset {
  _NewsFeedService_getFeed_args__isset() : id(false) {}
  bool id :1;
} _NewsFeedService_getFeed_args__isset;

class NewsFeedService_getFeed_args {
 public:

  NewsFeedService_getFeed_args(const NewsFeedService_getFeed_args&);
  NewsFeedService_getFeed_args& operator=(const NewsFeedService_getFeed_args&);
  NewsFeedService_getFeed_args() : id(0) {
  }

  virtual ~NewsFeedService_getFeed_args() throw();
  int32_t id;

  _NewsFeedService_getFeed_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const NewsFeedService_getFeed_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const NewsFeedService_getFeed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NewsFeedService_getFeed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NewsFeedService_getFeed_pargs {
 public:


  virtual ~NewsFeedService_getFeed_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NewsFeedService_getFeed_result__isset {
  _NewsFeedService_getFeed_result__isset() : success(false) {}
  bool success :1;
} _NewsFeedService_getFeed_result__isset;

class NewsFeedService_getFeed_result {
 public:

  NewsFeedService_getFeed_result(const NewsFeedService_getFeed_result&);
  NewsFeedService_getFeed_result& operator=(const NewsFeedService_getFeed_result&);
  NewsFeedService_getFeed_result() {
  }

  virtual ~NewsFeedService_getFeed_result() throw();
  FeedResult success;

  _NewsFeedService_getFeed_result__isset __isset;

  void __set_success(const FeedResult& val);

  bool operator == (const NewsFeedService_getFeed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NewsFeedService_getFeed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NewsFeedService_getFeed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NewsFeedService_getFeed_presult__isset {
  _NewsFeedService_getFeed_presult__isset() : success(false) {}
  bool success :1;
} _NewsFeedService_getFeed_presult__isset;

class NewsFeedService_getFeed_presult {
 public:


  virtual ~NewsFeedService_getFeed_presult() throw();
  FeedResult* success;

  _NewsFeedService_getFeed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NewsFeedService_getFeedCount_args__isset {
  _NewsFeedService_getFeedCount_args__isset() : owner(false) {}
  bool owner :1;
} _NewsFeedService_getFeedCount_args__isset;

class NewsFeedService_getFeedCount_args {
 public:

  NewsFeedService_getFeedCount_args(const NewsFeedService_getFeedCount_args&);
  NewsFeedService_getFeedCount_args& operator=(const NewsFeedService_getFeedCount_args&);
  NewsFeedService_getFeedCount_args() : owner(0) {
  }

  virtual ~NewsFeedService_getFeedCount_args() throw();
  int32_t owner;

  _NewsFeedService_getFeedCount_args__isset __isset;

  void __set_owner(const int32_t val);

  bool operator == (const NewsFeedService_getFeedCount_args & rhs) const
  {
    if (!(owner == rhs.owner))
      return false;
    return true;
  }
  bool operator != (const NewsFeedService_getFeedCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NewsFeedService_getFeedCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NewsFeedService_getFeedCount_pargs {
 public:


  virtual ~NewsFeedService_getFeedCount_pargs() throw();
  const int32_t* owner;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NewsFeedService_getFeedCount_result__isset {
  _NewsFeedService_getFeedCount_result__isset() : success(false) {}
  bool success :1;
} _NewsFeedService_getFeedCount_result__isset;

class NewsFeedService_getFeedCount_result {
 public:

  NewsFeedService_getFeedCount_result(const NewsFeedService_getFeedCount_result&);
  NewsFeedService_getFeedCount_result& operator=(const NewsFeedService_getFeedCount_result&);
  NewsFeedService_getFeedCount_result() {
  }

  virtual ~NewsFeedService_getFeedCount_result() throw();
  FeedCountResult success;

  _NewsFeedService_getFeedCount_result__isset __isset;

  void __set_success(const FeedCountResult& val);

  bool operator == (const NewsFeedService_getFeedCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NewsFeedService_getFeedCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NewsFeedService_getFeedCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NewsFeedService_getFeedCount_presult__isset {
  _NewsFeedService_getFeedCount_presult__isset() : success(false) {}
  bool success :1;
} _NewsFeedService_getFeedCount_presult__isset;

class NewsFeedService_getFeedCount_presult {
 public:


  virtual ~NewsFeedService_getFeedCount_presult() throw();
  FeedCountResult* success;

  _NewsFeedService_getFeedCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NewsFeedService_getListFeed_args__isset {
  _NewsFeedService_getListFeed_args__isset() : owner(false), post(false), count(false) {}
  bool owner :1;
  bool post :1;
  bool count :1;
} _NewsFeedService_getListFeed_args__isset;

class NewsFeedService_getListFeed_args {
 public:

  NewsFeedService_getListFeed_args(const NewsFeedService_getListFeed_args&);
  NewsFeedService_getListFeed_args& operator=(const NewsFeedService_getListFeed_args&);
  NewsFeedService_getListFeed_args() : owner(0), count(0) {
  }

  virtual ~NewsFeedService_getListFeed_args() throw();
  int32_t owner;
  Item post;
  int32_t count;

  _NewsFeedService_getListFeed_args__isset __isset;

  void __set_owner(const int32_t val);

  void __set_post(const Item& val);

  void __set_count(const int32_t val);

  bool operator == (const NewsFeedService_getListFeed_args & rhs) const
  {
    if (!(owner == rhs.owner))
      return false;
    if (!(post == rhs.post))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const NewsFeedService_getListFeed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NewsFeedService_getListFeed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NewsFeedService_getListFeed_pargs {
 public:


  virtual ~NewsFeedService_getListFeed_pargs() throw();
  const int32_t* owner;
  const Item* post;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NewsFeedService_getListFeed_result__isset {
  _NewsFeedService_getListFeed_result__isset() : success(false) {}
  bool success :1;
} _NewsFeedService_getListFeed_result__isset;

class NewsFeedService_getListFeed_result {
 public:

  NewsFeedService_getListFeed_result(const NewsFeedService_getListFeed_result&);
  NewsFeedService_getListFeed_result& operator=(const NewsFeedService_getListFeed_result&);
  NewsFeedService_getListFeed_result() {
  }

  virtual ~NewsFeedService_getListFeed_result() throw();
  ListFeedResult success;

  _NewsFeedService_getListFeed_result__isset __isset;

  void __set_success(const ListFeedResult& val);

  bool operator == (const NewsFeedService_getListFeed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NewsFeedService_getListFeed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NewsFeedService_getListFeed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NewsFeedService_getListFeed_presult__isset {
  _NewsFeedService_getListFeed_presult__isset() : success(false) {}
  bool success :1;
} _NewsFeedService_getListFeed_presult__isset;

class NewsFeedService_getListFeed_presult {
 public:


  virtual ~NewsFeedService_getListFeed_presult() throw();
  ListFeedResult* success;

  _NewsFeedService_getListFeed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class NewsFeedServiceClient : virtual public NewsFeedServiceIf {
 public:
  NewsFeedServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  NewsFeedServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createNewsFeed(FeedCreateResult& _return, const int32_t owner, const std::string& content, const int8_t status);
  void send_createNewsFeed(const int32_t owner, const std::string& content, const int8_t status);
  void recv_createNewsFeed(FeedCreateResult& _return);
  void updateNewsFeed(FeedUpdateResult& _return, const int32_t id, const std::string& content, const int8_t status);
  void send_updateNewsFeed(const int32_t id, const std::string& content, const int8_t status);
  void recv_updateNewsFeed(FeedUpdateResult& _return);
  void deleteNewsFeed(FeedDeleteResult& _return, const int32_t id, const int32_t owner);
  void send_deleteNewsFeed(const int32_t id, const int32_t owner);
  void recv_deleteNewsFeed(FeedDeleteResult& _return);
  void getFeed(FeedResult& _return, const int32_t id);
  void send_getFeed(const int32_t id);
  void recv_getFeed(FeedResult& _return);
  void getFeedCount(FeedCountResult& _return, const int32_t owner);
  void send_getFeedCount(const int32_t owner);
  void recv_getFeedCount(FeedCountResult& _return);
  void getListFeed(ListFeedResult& _return, const int32_t owner, const Item& post, const int32_t count);
  void send_getListFeed(const int32_t owner, const Item& post, const int32_t count);
  void recv_getListFeed(ListFeedResult& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class NewsFeedServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<NewsFeedServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (NewsFeedServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_createNewsFeed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateNewsFeed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteNewsFeed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFeed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFeedCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getListFeed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  NewsFeedServiceProcessor(boost::shared_ptr<NewsFeedServiceIf> iface) :
    iface_(iface) {
    processMap_["createNewsFeed"] = &NewsFeedServiceProcessor::process_createNewsFeed;
    processMap_["updateNewsFeed"] = &NewsFeedServiceProcessor::process_updateNewsFeed;
    processMap_["deleteNewsFeed"] = &NewsFeedServiceProcessor::process_deleteNewsFeed;
    processMap_["getFeed"] = &NewsFeedServiceProcessor::process_getFeed;
    processMap_["getFeedCount"] = &NewsFeedServiceProcessor::process_getFeedCount;
    processMap_["getListFeed"] = &NewsFeedServiceProcessor::process_getListFeed;
  }

  virtual ~NewsFeedServiceProcessor() {}
};

class NewsFeedServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  NewsFeedServiceProcessorFactory(const ::boost::shared_ptr< NewsFeedServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< NewsFeedServiceIfFactory > handlerFactory_;
};

class NewsFeedServiceMultiface : virtual public NewsFeedServiceIf {
 public:
  NewsFeedServiceMultiface(std::vector<boost::shared_ptr<NewsFeedServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~NewsFeedServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<NewsFeedServiceIf> > ifaces_;
  NewsFeedServiceMultiface() {}
  void add(boost::shared_ptr<NewsFeedServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void createNewsFeed(FeedCreateResult& _return, const int32_t owner, const std::string& content, const int8_t status) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createNewsFeed(_return, owner, content, status);
    }
    ifaces_[i]->createNewsFeed(_return, owner, content, status);
    return;
  }

  void updateNewsFeed(FeedUpdateResult& _return, const int32_t id, const std::string& content, const int8_t status) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateNewsFeed(_return, id, content, status);
    }
    ifaces_[i]->updateNewsFeed(_return, id, content, status);
    return;
  }

  void deleteNewsFeed(FeedDeleteResult& _return, const int32_t id, const int32_t owner) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteNewsFeed(_return, id, owner);
    }
    ifaces_[i]->deleteNewsFeed(_return, id, owner);
    return;
  }

  void getFeed(FeedResult& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFeed(_return, id);
    }
    ifaces_[i]->getFeed(_return, id);
    return;
  }

  void getFeedCount(FeedCountResult& _return, const int32_t owner) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFeedCount(_return, owner);
    }
    ifaces_[i]->getFeedCount(_return, owner);
    return;
  }

  void getListFeed(ListFeedResult& _return, const int32_t owner, const Item& post, const int32_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getListFeed(_return, owner, post, count);
    }
    ifaces_[i]->getListFeed(_return, owner, post, count);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class NewsFeedServiceConcurrentClient : virtual public NewsFeedServiceIf {
 public:
  NewsFeedServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  NewsFeedServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createNewsFeed(FeedCreateResult& _return, const int32_t owner, const std::string& content, const int8_t status);
  int32_t send_createNewsFeed(const int32_t owner, const std::string& content, const int8_t status);
  void recv_createNewsFeed(FeedCreateResult& _return, const int32_t seqid);
  void updateNewsFeed(FeedUpdateResult& _return, const int32_t id, const std::string& content, const int8_t status);
  int32_t send_updateNewsFeed(const int32_t id, const std::string& content, const int8_t status);
  void recv_updateNewsFeed(FeedUpdateResult& _return, const int32_t seqid);
  void deleteNewsFeed(FeedDeleteResult& _return, const int32_t id, const int32_t owner);
  int32_t send_deleteNewsFeed(const int32_t id, const int32_t owner);
  void recv_deleteNewsFeed(FeedDeleteResult& _return, const int32_t seqid);
  void getFeed(FeedResult& _return, const int32_t id);
  int32_t send_getFeed(const int32_t id);
  void recv_getFeed(FeedResult& _return, const int32_t seqid);
  void getFeedCount(FeedCountResult& _return, const int32_t owner);
  int32_t send_getFeedCount(const int32_t owner);
  void recv_getFeedCount(FeedCountResult& _return, const int32_t seqid);
  void getListFeed(ListFeedResult& _return, const int32_t owner, const Item& post, const int32_t count);
  int32_t send_getListFeed(const int32_t owner, const Item& post, const int32_t count);
  void recv_getListFeed(ListFeedResult& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
