// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "NewsFeedService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class NewsFeedServiceHandler : virtual public NewsFeedServiceIf {
 public:
  NewsFeedServiceHandler() {
    // Your initialization goes here
  }

  void createNewsFeed(FeedCreateResult& _return, const int32_t owner, const std::string& content, const int8_t status) {
    // Your implementation goes here
    printf("createNewsFeed\n");
  }

  void updateNewsFeed(FeedUpdateResult& _return, const int32_t id, const std::string& content, const int8_t status) {
    // Your implementation goes here
    printf("updateNewsFeed\n");
  }

  void deleteNewsFeed(FeedDeleteResult& _return, const int32_t id, const int32_t owner) {
    // Your implementation goes here
    printf("deleteNewsFeed\n");
  }

  void getFeed(FeedResult& _return, const int32_t id) {
    // Your implementation goes here
    printf("getFeed\n");
  }

  void getFeedCount(FeedCountResult& _return, const int32_t owner) {
    // Your implementation goes here
    printf("getFeedCount\n");
  }

  void getListFeed(ListFeedResult& _return, const int32_t owner, const Item& post, const int32_t count) {
    // Your implementation goes here
    printf("getListFeed\n");
  }

  void getListWall(ListFeedResult& _return, const int32_t owner, const Item& post, const int32_t count) {
    // Your implementation goes here
    printf("getListWall\n");
  }

  void getWallCount(FeedCountResult& _return, const int32_t owner) {
    // Your implementation goes here
    printf("getWallCount\n");
  }

  void rmOldFriendWall(FeedDeleteResult& _return, const int32_t owner, const int32_t old_friend) {
    // Your implementation goes here
    printf("rmOldFriendWall\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<NewsFeedServiceHandler> handler(new NewsFeedServiceHandler());
  shared_ptr<TProcessor> processor(new NewsFeedServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

