/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef message_TYPES_H
#define message_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class Message;

class ListBox;

class IB_Info;

class Inbox;

class MessageCreateResult;

class ListMessage;

class ListMessageResult;

class KeyMsgResult;

typedef struct _Message__isset {
  _Message__isset() : msg_id(false), content(false), id_from(false), date_create(false) {}
  bool msg_id :1;
  bool content :1;
  bool id_from :1;
  bool date_create :1;
} _Message__isset;

class Message {
 public:

  Message(const Message&);
  Message& operator=(const Message&);
  Message() : msg_id(0), content(), id_from(0), date_create(0) {
  }

  virtual ~Message() throw();
  int32_t msg_id;
  std::string content;
  int32_t id_from;
  int32_t date_create;

  _Message__isset __isset;

  void __set_msg_id(const int32_t val);

  void __set_content(const std::string& val);

  void __set_id_from(const int32_t val);

  void __set_date_create(const int32_t val);

  bool operator == (const Message & rhs) const
  {
    if (!(msg_id == rhs.msg_id))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(id_from == rhs.id_from))
      return false;
    if (!(date_create == rhs.date_create))
      return false;
    return true;
  }
  bool operator != (const Message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Message &a, Message &b);

inline std::ostream& operator<<(std::ostream& out, const Message& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ListBox__isset {
  _ListBox__isset() : _id(false), list_inbox(false), count(false) {}
  bool _id :1;
  bool list_inbox :1;
  bool count :1;
} _ListBox__isset;

class ListBox {
 public:

  ListBox(const ListBox&);
  ListBox& operator=(const ListBox&);
  ListBox() : _id(0), count(0) {
  }

  virtual ~ListBox() throw();
  int32_t _id;
  std::vector<std::string>  list_inbox;
  int32_t count;

  _ListBox__isset __isset;

  void __set__id(const int32_t val);

  void __set_list_inbox(const std::vector<std::string> & val);

  void __set_count(const int32_t val);

  bool operator == (const ListBox & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(list_inbox == rhs.list_inbox))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const ListBox &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListBox & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ListBox &a, ListBox &b);

inline std::ostream& operator<<(std::ostream& out, const ListBox& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _IB_Info__isset {
  _IB_Info__isset() : _id(false), count(false) {}
  bool _id :1;
  bool count :1;
} _IB_Info__isset;

class IB_Info {
 public:

  IB_Info(const IB_Info&);
  IB_Info& operator=(const IB_Info&);
  IB_Info() : _id(), count(0) {
  }

  virtual ~IB_Info() throw();
  std::string _id;
  int32_t count;

  _IB_Info__isset __isset;

  void __set__id(const std::string& val);

  void __set_count(const int32_t val);

  bool operator == (const IB_Info & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const IB_Info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IB_Info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(IB_Info &a, IB_Info &b);

inline std::ostream& operator<<(std::ostream& out, const IB_Info& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Inbox__isset {
  _Inbox__isset() : _id(false), _count(false), list_msg(false) {}
  bool _id :1;
  bool _count :1;
  bool list_msg :1;
} _Inbox__isset;

class Inbox {
 public:

  Inbox(const Inbox&);
  Inbox& operator=(const Inbox&);
  Inbox() : _id(), _count(0) {
  }

  virtual ~Inbox() throw();
  std::string _id;
  int32_t _count;
  std::vector<int32_t>  list_msg;

  _Inbox__isset __isset;

  void __set__id(const std::string& val);

  void __set__count(const int32_t val);

  void __set_list_msg(const std::vector<int32_t> & val);

  bool operator == (const Inbox & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_count == rhs._count))
      return false;
    if (!(list_msg == rhs.list_msg))
      return false;
    return true;
  }
  bool operator != (const Inbox &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Inbox & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Inbox &a, Inbox &b);

inline std::ostream& operator<<(std::ostream& out, const Inbox& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _MessageCreateResult__isset {
  _MessageCreateResult__isset() : errorCode(false), message(false), new_count(false) {}
  bool errorCode :1;
  bool message :1;
  bool new_count :1;
} _MessageCreateResult__isset;

class MessageCreateResult {
 public:

  MessageCreateResult(const MessageCreateResult&);
  MessageCreateResult& operator=(const MessageCreateResult&);
  MessageCreateResult() : errorCode(0), message(), new_count(0) {
  }

  virtual ~MessageCreateResult() throw();
  int32_t errorCode;
  std::string message;
  int32_t new_count;

  _MessageCreateResult__isset __isset;

  void __set_errorCode(const int32_t val);

  void __set_message(const std::string& val);

  void __set_new_count(const int32_t val);

  bool operator == (const MessageCreateResult & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(new_count == rhs.new_count))
      return false;
    return true;
  }
  bool operator != (const MessageCreateResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageCreateResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MessageCreateResult &a, MessageCreateResult &b);

inline std::ostream& operator<<(std::ostream& out, const MessageCreateResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ListMessage__isset {
  _ListMessage__isset() : count(false), msglist(false) {}
  bool count :1;
  bool msglist :1;
} _ListMessage__isset;

class ListMessage {
 public:

  ListMessage(const ListMessage&);
  ListMessage& operator=(const ListMessage&);
  ListMessage() : count(0) {
  }

  virtual ~ListMessage() throw();
  int32_t count;
  std::vector<Message>  msglist;

  _ListMessage__isset __isset;

  void __set_count(const int32_t val);

  void __set_msglist(const std::vector<Message> & val);

  bool operator == (const ListMessage & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(msglist == rhs.msglist))
      return false;
    return true;
  }
  bool operator != (const ListMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ListMessage &a, ListMessage &b);

inline std::ostream& operator<<(std::ostream& out, const ListMessage& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ListMessageResult__isset {
  _ListMessageResult__isset() : errorCode(false), message(false), result(false) {}
  bool errorCode :1;
  bool message :1;
  bool result :1;
} _ListMessageResult__isset;

class ListMessageResult {
 public:

  ListMessageResult(const ListMessageResult&);
  ListMessageResult& operator=(const ListMessageResult&);
  ListMessageResult() : errorCode(0), message() {
  }

  virtual ~ListMessageResult() throw();
  int32_t errorCode;
  std::string message;
  ListMessage result;

  _ListMessageResult__isset __isset;

  void __set_errorCode(const int32_t val);

  void __set_message(const std::string& val);

  void __set_result(const ListMessage& val);

  bool operator == (const ListMessageResult & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const ListMessageResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListMessageResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ListMessageResult &a, ListMessageResult &b);

inline std::ostream& operator<<(std::ostream& out, const ListMessageResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _KeyMsgResult__isset {
  _KeyMsgResult__isset() : errorCode(false), message(false), key(false) {}
  bool errorCode :1;
  bool message :1;
  bool key :1;
} _KeyMsgResult__isset;

class KeyMsgResult {
 public:

  KeyMsgResult(const KeyMsgResult&);
  KeyMsgResult& operator=(const KeyMsgResult&);
  KeyMsgResult() : errorCode(0), message(), key() {
  }

  virtual ~KeyMsgResult() throw();
  int32_t errorCode;
  std::string message;
  std::string key;

  _KeyMsgResult__isset __isset;

  void __set_errorCode(const int32_t val);

  void __set_message(const std::string& val);

  void __set_key(const std::string& val);

  bool operator == (const KeyMsgResult & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const KeyMsgResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyMsgResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(KeyMsgResult &a, KeyMsgResult &b);

inline std::ostream& operator<<(std::ostream& out, const KeyMsgResult& obj)
{
  obj.printTo(out);
  return out;
}



#endif
