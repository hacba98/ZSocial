/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SocialServices_TYPES_H
#define SocialServices_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




struct ErrorCode {
  enum type {
    SUCCESS = 0,
    USER_NOT_FOUND = 1,
    INVALID_PARAMETER = 2,
    INVALID_SERVICE = 3,
    INTERNAL_ERROR = 4,
    DUPLICATED_REQUEST = 5,
    OUT_OF_RANGE = 6
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

class UserProfile;

class SimpleProfile;

class CreateUserResult;

class GetUserResult;

class ListProfileResult;

class FriendList;

class PendingRequest;

class FriendRequest;

class FriendData;

class pingResult;

class listFriendResult;

class loginResult;

class PostList;

class NewsFeed;

class FeedCreateResult;

class FeedUpdateResult;

class FeedDeleteResult;

class FeedResult;

class Item;

class FeedCountResult;

class ListFeed;

class ListFeedResult;

typedef struct _UserProfile__isset {
  _UserProfile__isset() : id(false), name(false), birth(false), gender(false), username(false), password(false), phoneNumber(false), join_date(false), last_active_time(false) {}
  bool id :1;
  bool name :1;
  bool birth :1;
  bool gender :1;
  bool username :1;
  bool password :1;
  bool phoneNumber :1;
  bool join_date :1;
  bool last_active_time :1;
} _UserProfile__isset;

class UserProfile {
 public:

  UserProfile(const UserProfile&);
  UserProfile& operator=(const UserProfile&);
  UserProfile() : id(0), name(), birth(0), gender(0), username(), password(), phoneNumber(0), join_date(0), last_active_time(0) {
  }

  virtual ~UserProfile() throw();
  int32_t id;
  std::string name;
  int32_t birth;
  bool gender;
  std::string username;
  std::string password;
  int64_t phoneNumber;
  int32_t join_date;
  int32_t last_active_time;

  _UserProfile__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_birth(const int32_t val);

  void __set_gender(const bool val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_phoneNumber(const int64_t val);

  void __set_join_date(const int32_t val);

  void __set_last_active_time(const int32_t val);

  bool operator == (const UserProfile & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(birth == rhs.birth))
      return false;
    if (!(gender == rhs.gender))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(phoneNumber == rhs.phoneNumber))
      return false;
    if (!(join_date == rhs.join_date))
      return false;
    if (!(last_active_time == rhs.last_active_time))
      return false;
    return true;
  }
  bool operator != (const UserProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserProfile &a, UserProfile &b);

inline std::ostream& operator<<(std::ostream& out, const UserProfile& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SimpleProfile__isset {
  _SimpleProfile__isset() : id(false), name(false), gender(false), last_active_time(false) {}
  bool id :1;
  bool name :1;
  bool gender :1;
  bool last_active_time :1;
} _SimpleProfile__isset;

class SimpleProfile {
 public:

  SimpleProfile(const SimpleProfile&);
  SimpleProfile& operator=(const SimpleProfile&);
  SimpleProfile() : id(0), name(), gender(0), last_active_time(0) {
  }

  virtual ~SimpleProfile() throw();
  int32_t id;
  std::string name;
  bool gender;
  int32_t last_active_time;

  _SimpleProfile__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_gender(const bool val);

  void __set_last_active_time(const int32_t val);

  bool operator == (const SimpleProfile & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(gender == rhs.gender))
      return false;
    if (!(last_active_time == rhs.last_active_time))
      return false;
    return true;
  }
  bool operator != (const SimpleProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SimpleProfile &a, SimpleProfile &b);

inline std::ostream& operator<<(std::ostream& out, const SimpleProfile& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CreateUserResult__isset {
  _CreateUserResult__isset() : errorCode(false), id(false) {}
  bool errorCode :1;
  bool id :1;
} _CreateUserResult__isset;

class CreateUserResult {
 public:

  CreateUserResult(const CreateUserResult&);
  CreateUserResult& operator=(const CreateUserResult&);
  CreateUserResult() : errorCode((ErrorCode::type)0), id(0) {
  }

  virtual ~CreateUserResult() throw();
  ErrorCode::type errorCode;
  int32_t id;

  _CreateUserResult__isset __isset;

  void __set_errorCode(const ErrorCode::type val);

  void __set_id(const int32_t val);

  bool operator == (const CreateUserResult & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CreateUserResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateUserResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CreateUserResult &a, CreateUserResult &b);

inline std::ostream& operator<<(std::ostream& out, const CreateUserResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetUserResult__isset {
  _GetUserResult__isset() : errorCode(false), profile(false) {}
  bool errorCode :1;
  bool profile :1;
} _GetUserResult__isset;

class GetUserResult {
 public:

  GetUserResult(const GetUserResult&);
  GetUserResult& operator=(const GetUserResult&);
  GetUserResult() : errorCode((ErrorCode::type)0) {
  }

  virtual ~GetUserResult() throw();
  ErrorCode::type errorCode;
  UserProfile profile;

  _GetUserResult__isset __isset;

  void __set_errorCode(const ErrorCode::type val);

  void __set_profile(const UserProfile& val);

  bool operator == (const GetUserResult & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(profile == rhs.profile))
      return false;
    return true;
  }
  bool operator != (const GetUserResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetUserResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetUserResult &a, GetUserResult &b);

inline std::ostream& operator<<(std::ostream& out, const GetUserResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ListProfileResult__isset {
  _ListProfileResult__isset() : errorCode(false), profiles(false) {}
  bool errorCode :1;
  bool profiles :1;
} _ListProfileResult__isset;

class ListProfileResult {
 public:

  ListProfileResult(const ListProfileResult&);
  ListProfileResult& operator=(const ListProfileResult&);
  ListProfileResult() : errorCode((ErrorCode::type)0) {
  }

  virtual ~ListProfileResult() throw();
  ErrorCode::type errorCode;
  std::vector<SimpleProfile>  profiles;

  _ListProfileResult__isset __isset;

  void __set_errorCode(const ErrorCode::type val);

  void __set_profiles(const std::vector<SimpleProfile> & val);

  bool operator == (const ListProfileResult & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(profiles == rhs.profiles))
      return false;
    return true;
  }
  bool operator != (const ListProfileResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListProfileResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ListProfileResult &a, ListProfileResult &b);

inline std::ostream& operator<<(std::ostream& out, const ListProfileResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _FriendList__isset {
  _FriendList__isset() : size(false), data(false) {}
  bool size :1;
  bool data :1;
} _FriendList__isset;

class FriendList {
 public:

  FriendList(const FriendList&);
  FriendList& operator=(const FriendList&);
  FriendList() : size(0) {
  }

  virtual ~FriendList() throw();
  int32_t size;
  std::set<int32_t>  data;

  _FriendList__isset __isset;

  void __set_size(const int32_t val);

  void __set_data(const std::set<int32_t> & val);

  bool operator == (const FriendList & rhs) const
  {
    if (!(size == rhs.size))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const FriendList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FriendList &a, FriendList &b);

inline std::ostream& operator<<(std::ostream& out, const FriendList& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _PendingRequest__isset {
  _PendingRequest__isset() : size(false), data(false) {}
  bool size :1;
  bool data :1;
} _PendingRequest__isset;

class PendingRequest {
 public:

  PendingRequest(const PendingRequest&);
  PendingRequest& operator=(const PendingRequest&);
  PendingRequest() : size(0) {
  }

  virtual ~PendingRequest() throw();
  int32_t size;
  std::set<int32_t>  data;

  _PendingRequest__isset __isset;

  void __set_size(const int32_t val);

  void __set_data(const std::set<int32_t> & val);

  bool operator == (const PendingRequest & rhs) const
  {
    if (!(size == rhs.size))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const PendingRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PendingRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PendingRequest &a, PendingRequest &b);

inline std::ostream& operator<<(std::ostream& out, const PendingRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _FriendRequest__isset {
  _FriendRequest__isset() : p_send_req(false), p_recv_req(false), greeting(false), time(false), id(false) {}
  bool p_send_req :1;
  bool p_recv_req :1;
  bool greeting :1;
  bool time :1;
  bool id :1;
} _FriendRequest__isset;

class FriendRequest {
 public:

  FriendRequest(const FriendRequest&);
  FriendRequest& operator=(const FriendRequest&);
  FriendRequest() : p_send_req(0), p_recv_req(0), greeting(), time(0), id(0) {
  }

  virtual ~FriendRequest() throw();
  int32_t p_send_req;
  int32_t p_recv_req;
  std::string greeting;
  int32_t time;
  int32_t id;

  _FriendRequest__isset __isset;

  void __set_p_send_req(const int32_t val);

  void __set_p_recv_req(const int32_t val);

  void __set_greeting(const std::string& val);

  void __set_time(const int32_t val);

  void __set_id(const int32_t val);

  bool operator == (const FriendRequest & rhs) const
  {
    if (!(p_send_req == rhs.p_send_req))
      return false;
    if (!(p_recv_req == rhs.p_recv_req))
      return false;
    if (!(greeting == rhs.greeting))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const FriendRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FriendRequest &a, FriendRequest &b);

inline std::ostream& operator<<(std::ostream& out, const FriendRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _FriendData__isset {
  _FriendData__isset() : id(false), name(false), isMale(false) {}
  bool id :1;
  bool name :1;
  bool isMale :1;
} _FriendData__isset;

class FriendData {
 public:

  FriendData(const FriendData&);
  FriendData& operator=(const FriendData&);
  FriendData() : id(0), name(), isMale(0) {
  }

  virtual ~FriendData() throw();
  int32_t id;
  std::string name;
  bool isMale;

  _FriendData__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_isMale(const bool val);

  bool operator == (const FriendData & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(isMale == rhs.isMale))
      return false;
    return true;
  }
  bool operator != (const FriendData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FriendData &a, FriendData &b);

inline std::ostream& operator<<(std::ostream& out, const FriendData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _pingResult__isset {
  _pingResult__isset() : haveData(false), data(false) {}
  bool haveData :1;
  bool data :1;
} _pingResult__isset;

class pingResult {
 public:

  pingResult(const pingResult&);
  pingResult& operator=(const pingResult&);
  pingResult() : haveData(0) {
  }

  virtual ~pingResult() throw();
  bool haveData;
  std::vector<FriendRequest>  data;

  _pingResult__isset __isset;

  void __set_haveData(const bool val);

  void __set_data(const std::vector<FriendRequest> & val);

  bool operator == (const pingResult & rhs) const
  {
    if (!(haveData == rhs.haveData))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const pingResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const pingResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(pingResult &a, pingResult &b);

inline std::ostream& operator<<(std::ostream& out, const pingResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _listFriendResult__isset {
  _listFriendResult__isset() : size(false), idx(false), friendList(false), code(false) {}
  bool size :1;
  bool idx :1;
  bool friendList :1;
  bool code :1;
} _listFriendResult__isset;

class listFriendResult {
 public:

  listFriendResult(const listFriendResult&);
  listFriendResult& operator=(const listFriendResult&);
  listFriendResult() : size(0), idx(0), code((ErrorCode::type)0) {
  }

  virtual ~listFriendResult() throw();
  int32_t size;
  int32_t idx;
  std::vector<FriendData>  friendList;
  ErrorCode::type code;

  _listFriendResult__isset __isset;

  void __set_size(const int32_t val);

  void __set_idx(const int32_t val);

  void __set_friendList(const std::vector<FriendData> & val);

  void __set_code(const ErrorCode::type val);

  bool operator == (const listFriendResult & rhs) const
  {
    if (!(size == rhs.size))
      return false;
    if (!(idx == rhs.idx))
      return false;
    if (!(friendList == rhs.friendList))
      return false;
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const listFriendResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const listFriendResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(listFriendResult &a, listFriendResult &b);

inline std::ostream& operator<<(std::ostream& out, const listFriendResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _loginResult__isset {
  _loginResult__isset() : code(false), profile(false) {}
  bool code :1;
  bool profile :1;
} _loginResult__isset;

class loginResult {
 public:

  loginResult(const loginResult&);
  loginResult& operator=(const loginResult&);
  loginResult() : code((ErrorCode::type)0) {
  }

  virtual ~loginResult() throw();
  ErrorCode::type code;
  SimpleProfile profile;

  _loginResult__isset __isset;

  void __set_code(const ErrorCode::type val);

  void __set_profile(const SimpleProfile& val);

  bool operator == (const loginResult & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(profile == rhs.profile))
      return false;
    return true;
  }
  bool operator != (const loginResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loginResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(loginResult &a, loginResult &b);

inline std::ostream& operator<<(std::ostream& out, const loginResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _PostList__isset {
  _PostList__isset() : id(false), count(false), listFeed(false) {}
  bool id :1;
  bool count :1;
  bool listFeed :1;
} _PostList__isset;

class PostList {
 public:

  PostList(const PostList&);
  PostList& operator=(const PostList&);
  PostList() : id(0), count(0) {
  }

  virtual ~PostList() throw();
  int32_t id;
  int32_t count;
  std::vector<int32_t>  listFeed;

  _PostList__isset __isset;

  void __set_id(const int32_t val);

  void __set_count(const int32_t val);

  void __set_listFeed(const std::vector<int32_t> & val);

  bool operator == (const PostList & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(listFeed == rhs.listFeed))
      return false;
    return true;
  }
  bool operator != (const PostList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PostList &a, PostList &b);

inline std::ostream& operator<<(std::ostream& out, const PostList& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _NewsFeed__isset {
  _NewsFeed__isset() : id(false), owner(false), content(false), edit_time(false), status(false) {}
  bool id :1;
  bool owner :1;
  bool content :1;
  bool edit_time :1;
  bool status :1;
} _NewsFeed__isset;

class NewsFeed {
 public:

  NewsFeed(const NewsFeed&);
  NewsFeed& operator=(const NewsFeed&);
  NewsFeed() : id(0), owner(0), content(), edit_time(0), status(0) {
  }

  virtual ~NewsFeed() throw();
  int32_t id;
  int32_t owner;
  std::string content;
  int32_t edit_time;
  int8_t status;

  _NewsFeed__isset __isset;

  void __set_id(const int32_t val);

  void __set_owner(const int32_t val);

  void __set_content(const std::string& val);

  void __set_edit_time(const int32_t val);

  void __set_status(const int8_t val);

  bool operator == (const NewsFeed & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(owner == rhs.owner))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(edit_time == rhs.edit_time))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const NewsFeed &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NewsFeed & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NewsFeed &a, NewsFeed &b);

inline std::ostream& operator<<(std::ostream& out, const NewsFeed& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _FeedCreateResult__isset {
  _FeedCreateResult__isset() : exitCode(false), message(false), result(false) {}
  bool exitCode :1;
  bool message :1;
  bool result :1;
} _FeedCreateResult__isset;

class FeedCreateResult {
 public:

  FeedCreateResult(const FeedCreateResult&);
  FeedCreateResult& operator=(const FeedCreateResult&);
  FeedCreateResult() : exitCode(0), message(), result(0) {
  }

  virtual ~FeedCreateResult() throw();
  int32_t exitCode;
  std::string message;
  int32_t result;

  _FeedCreateResult__isset __isset;

  void __set_exitCode(const int32_t val);

  void __set_message(const std::string& val);

  void __set_result(const int32_t val);

  bool operator == (const FeedCreateResult & rhs) const
  {
    if (!(exitCode == rhs.exitCode))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const FeedCreateResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FeedCreateResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FeedCreateResult &a, FeedCreateResult &b);

inline std::ostream& operator<<(std::ostream& out, const FeedCreateResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _FeedUpdateResult__isset {
  _FeedUpdateResult__isset() : exitCode(false), message(false) {}
  bool exitCode :1;
  bool message :1;
} _FeedUpdateResult__isset;

class FeedUpdateResult {
 public:

  FeedUpdateResult(const FeedUpdateResult&);
  FeedUpdateResult& operator=(const FeedUpdateResult&);
  FeedUpdateResult() : exitCode(0), message() {
  }

  virtual ~FeedUpdateResult() throw();
  int32_t exitCode;
  std::string message;

  _FeedUpdateResult__isset __isset;

  void __set_exitCode(const int32_t val);

  void __set_message(const std::string& val);

  bool operator == (const FeedUpdateResult & rhs) const
  {
    if (!(exitCode == rhs.exitCode))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const FeedUpdateResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FeedUpdateResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FeedUpdateResult &a, FeedUpdateResult &b);

inline std::ostream& operator<<(std::ostream& out, const FeedUpdateResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _FeedDeleteResult__isset {
  _FeedDeleteResult__isset() : exitCode(false), message(false) {}
  bool exitCode :1;
  bool message :1;
} _FeedDeleteResult__isset;

class FeedDeleteResult {
 public:

  FeedDeleteResult(const FeedDeleteResult&);
  FeedDeleteResult& operator=(const FeedDeleteResult&);
  FeedDeleteResult() : exitCode(0), message() {
  }

  virtual ~FeedDeleteResult() throw();
  int32_t exitCode;
  std::string message;

  _FeedDeleteResult__isset __isset;

  void __set_exitCode(const int32_t val);

  void __set_message(const std::string& val);

  bool operator == (const FeedDeleteResult & rhs) const
  {
    if (!(exitCode == rhs.exitCode))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const FeedDeleteResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FeedDeleteResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FeedDeleteResult &a, FeedDeleteResult &b);

inline std::ostream& operator<<(std::ostream& out, const FeedDeleteResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _FeedResult__isset {
  _FeedResult__isset() : exitCode(false), message(false), result(false) {}
  bool exitCode :1;
  bool message :1;
  bool result :1;
} _FeedResult__isset;

class FeedResult {
 public:

  FeedResult(const FeedResult&);
  FeedResult& operator=(const FeedResult&);
  FeedResult() : exitCode(0), message() {
  }

  virtual ~FeedResult() throw();
  int32_t exitCode;
  std::string message;
  NewsFeed result;

  _FeedResult__isset __isset;

  void __set_exitCode(const int32_t val);

  void __set_message(const std::string& val);

  void __set_result(const NewsFeed& val);

  bool operator == (const FeedResult & rhs) const
  {
    if (!(exitCode == rhs.exitCode))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const FeedResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FeedResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FeedResult &a, FeedResult &b);

inline std::ostream& operator<<(std::ostream& out, const FeedResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Item__isset {
  _Item__isset() : post(false), id(false) {}
  bool post :1;
  bool id :1;
} _Item__isset;

class Item {
 public:

  Item(const Item&);
  Item& operator=(const Item&);
  Item() : post(0), id(0) {
  }

  virtual ~Item() throw();
  int32_t post;
  int32_t id;

  _Item__isset __isset;

  void __set_post(const int32_t val);

  void __set_id(const int32_t val);

  bool operator == (const Item & rhs) const
  {
    if (!(post == rhs.post))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const Item &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Item & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Item &a, Item &b);

inline std::ostream& operator<<(std::ostream& out, const Item& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _FeedCountResult__isset {
  _FeedCountResult__isset() : exitCode(false), message(false), result(false) {}
  bool exitCode :1;
  bool message :1;
  bool result :1;
} _FeedCountResult__isset;

class FeedCountResult {
 public:

  FeedCountResult(const FeedCountResult&);
  FeedCountResult& operator=(const FeedCountResult&);
  FeedCountResult() : exitCode(0), message() {
  }

  virtual ~FeedCountResult() throw();
  int32_t exitCode;
  std::string message;
  Item result;

  _FeedCountResult__isset __isset;

  void __set_exitCode(const int32_t val);

  void __set_message(const std::string& val);

  void __set_result(const Item& val);

  bool operator == (const FeedCountResult & rhs) const
  {
    if (!(exitCode == rhs.exitCode))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const FeedCountResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FeedCountResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FeedCountResult &a, FeedCountResult &b);

inline std::ostream& operator<<(std::ostream& out, const FeedCountResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ListFeed__isset {
  _ListFeed__isset() : count(false), feedlist(false), nex(false) {}
  bool count :1;
  bool feedlist :1;
  bool nex :1;
} _ListFeed__isset;

class ListFeed {
 public:

  ListFeed(const ListFeed&);
  ListFeed& operator=(const ListFeed&);
  ListFeed() : count(0) {
  }

  virtual ~ListFeed() throw();
  int32_t count;
  std::vector<NewsFeed>  feedlist;
  Item nex;

  _ListFeed__isset __isset;

  void __set_count(const int32_t val);

  void __set_feedlist(const std::vector<NewsFeed> & val);

  void __set_nex(const Item& val);

  bool operator == (const ListFeed & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(feedlist == rhs.feedlist))
      return false;
    if (!(nex == rhs.nex))
      return false;
    return true;
  }
  bool operator != (const ListFeed &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListFeed & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ListFeed &a, ListFeed &b);

inline std::ostream& operator<<(std::ostream& out, const ListFeed& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ListFeedResult__isset {
  _ListFeedResult__isset() : exitCode(false), message(false), result(false) {}
  bool exitCode :1;
  bool message :1;
  bool result :1;
} _ListFeedResult__isset;

class ListFeedResult {
 public:

  ListFeedResult(const ListFeedResult&);
  ListFeedResult& operator=(const ListFeedResult&);
  ListFeedResult() : exitCode(0), message() {
  }

  virtual ~ListFeedResult() throw();
  int32_t exitCode;
  std::string message;
  ListFeed result;

  _ListFeedResult__isset __isset;

  void __set_exitCode(const int32_t val);

  void __set_message(const std::string& val);

  void __set_result(const ListFeed& val);

  bool operator == (const ListFeedResult & rhs) const
  {
    if (!(exitCode == rhs.exitCode))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const ListFeedResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListFeedResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ListFeedResult &a, ListFeedResult &b);

inline std::ostream& operator<<(std::ostream& out, const ListFeedResult& obj)
{
  obj.printTo(out);
  return out;
}



#endif
