/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MessageService_H
#define MessageService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "message_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MessageServiceIf {
 public:
  virtual ~MessageServiceIf() {}
  virtual void createMessage(MessageCreateResult& _return, const int32_t id_from, const std::string& inbox_id, const std::string& content) = 0;
  virtual void getMessages(ListMessageResult& _return, const std::string& inbox_id, const int32_t count) = 0;
  virtual void getKey(KeyMsgResult& _return, const int32_t id1, const int32_t id2) = 0;
  virtual void getBoxinfo(IB_Info& _return, const std::string& inbox_id) = 0;
  virtual void getNewMessages(ListMessageResult& _return, const std::string& inbox_id, const int32_t old_count, const int32_t new_count) = 0;
};

class MessageServiceIfFactory {
 public:
  typedef MessageServiceIf Handler;

  virtual ~MessageServiceIfFactory() {}

  virtual MessageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MessageServiceIf* /* handler */) = 0;
};

class MessageServiceIfSingletonFactory : virtual public MessageServiceIfFactory {
 public:
  MessageServiceIfSingletonFactory(const boost::shared_ptr<MessageServiceIf>& iface) : iface_(iface) {}
  virtual ~MessageServiceIfSingletonFactory() {}

  virtual MessageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MessageServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MessageServiceIf> iface_;
};

class MessageServiceNull : virtual public MessageServiceIf {
 public:
  virtual ~MessageServiceNull() {}
  void createMessage(MessageCreateResult& /* _return */, const int32_t /* id_from */, const std::string& /* inbox_id */, const std::string& /* content */) {
    return;
  }
  void getMessages(ListMessageResult& /* _return */, const std::string& /* inbox_id */, const int32_t /* count */) {
    return;
  }
  void getKey(KeyMsgResult& /* _return */, const int32_t /* id1 */, const int32_t /* id2 */) {
    return;
  }
  void getBoxinfo(IB_Info& /* _return */, const std::string& /* inbox_id */) {
    return;
  }
  void getNewMessages(ListMessageResult& /* _return */, const std::string& /* inbox_id */, const int32_t /* old_count */, const int32_t /* new_count */) {
    return;
  }
};

typedef struct _MessageService_createMessage_args__isset {
  _MessageService_createMessage_args__isset() : id_from(false), inbox_id(false), content(false) {}
  bool id_from :1;
  bool inbox_id :1;
  bool content :1;
} _MessageService_createMessage_args__isset;

class MessageService_createMessage_args {
 public:

  MessageService_createMessage_args(const MessageService_createMessage_args&);
  MessageService_createMessage_args& operator=(const MessageService_createMessage_args&);
  MessageService_createMessage_args() : id_from(0), inbox_id(), content() {
  }

  virtual ~MessageService_createMessage_args() throw();
  int32_t id_from;
  std::string inbox_id;
  std::string content;

  _MessageService_createMessage_args__isset __isset;

  void __set_id_from(const int32_t val);

  void __set_inbox_id(const std::string& val);

  void __set_content(const std::string& val);

  bool operator == (const MessageService_createMessage_args & rhs) const
  {
    if (!(id_from == rhs.id_from))
      return false;
    if (!(inbox_id == rhs.inbox_id))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const MessageService_createMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_createMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_createMessage_pargs {
 public:


  virtual ~MessageService_createMessage_pargs() throw();
  const int32_t* id_from;
  const std::string* inbox_id;
  const std::string* content;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_createMessage_result__isset {
  _MessageService_createMessage_result__isset() : success(false) {}
  bool success :1;
} _MessageService_createMessage_result__isset;

class MessageService_createMessage_result {
 public:

  MessageService_createMessage_result(const MessageService_createMessage_result&);
  MessageService_createMessage_result& operator=(const MessageService_createMessage_result&);
  MessageService_createMessage_result() {
  }

  virtual ~MessageService_createMessage_result() throw();
  MessageCreateResult success;

  _MessageService_createMessage_result__isset __isset;

  void __set_success(const MessageCreateResult& val);

  bool operator == (const MessageService_createMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MessageService_createMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_createMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_createMessage_presult__isset {
  _MessageService_createMessage_presult__isset() : success(false) {}
  bool success :1;
} _MessageService_createMessage_presult__isset;

class MessageService_createMessage_presult {
 public:


  virtual ~MessageService_createMessage_presult() throw();
  MessageCreateResult* success;

  _MessageService_createMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MessageService_getMessages_args__isset {
  _MessageService_getMessages_args__isset() : inbox_id(false), count(false) {}
  bool inbox_id :1;
  bool count :1;
} _MessageService_getMessages_args__isset;

class MessageService_getMessages_args {
 public:

  MessageService_getMessages_args(const MessageService_getMessages_args&);
  MessageService_getMessages_args& operator=(const MessageService_getMessages_args&);
  MessageService_getMessages_args() : inbox_id(), count(0) {
  }

  virtual ~MessageService_getMessages_args() throw();
  std::string inbox_id;
  int32_t count;

  _MessageService_getMessages_args__isset __isset;

  void __set_inbox_id(const std::string& val);

  void __set_count(const int32_t val);

  bool operator == (const MessageService_getMessages_args & rhs) const
  {
    if (!(inbox_id == rhs.inbox_id))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const MessageService_getMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_getMessages_pargs {
 public:


  virtual ~MessageService_getMessages_pargs() throw();
  const std::string* inbox_id;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getMessages_result__isset {
  _MessageService_getMessages_result__isset() : success(false) {}
  bool success :1;
} _MessageService_getMessages_result__isset;

class MessageService_getMessages_result {
 public:

  MessageService_getMessages_result(const MessageService_getMessages_result&);
  MessageService_getMessages_result& operator=(const MessageService_getMessages_result&);
  MessageService_getMessages_result() {
  }

  virtual ~MessageService_getMessages_result() throw();
  ListMessageResult success;

  _MessageService_getMessages_result__isset __isset;

  void __set_success(const ListMessageResult& val);

  bool operator == (const MessageService_getMessages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MessageService_getMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getMessages_presult__isset {
  _MessageService_getMessages_presult__isset() : success(false) {}
  bool success :1;
} _MessageService_getMessages_presult__isset;

class MessageService_getMessages_presult {
 public:


  virtual ~MessageService_getMessages_presult() throw();
  ListMessageResult* success;

  _MessageService_getMessages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MessageService_getKey_args__isset {
  _MessageService_getKey_args__isset() : id1(false), id2(false) {}
  bool id1 :1;
  bool id2 :1;
} _MessageService_getKey_args__isset;

class MessageService_getKey_args {
 public:

  MessageService_getKey_args(const MessageService_getKey_args&);
  MessageService_getKey_args& operator=(const MessageService_getKey_args&);
  MessageService_getKey_args() : id1(0), id2(0) {
  }

  virtual ~MessageService_getKey_args() throw();
  int32_t id1;
  int32_t id2;

  _MessageService_getKey_args__isset __isset;

  void __set_id1(const int32_t val);

  void __set_id2(const int32_t val);

  bool operator == (const MessageService_getKey_args & rhs) const
  {
    if (!(id1 == rhs.id1))
      return false;
    if (!(id2 == rhs.id2))
      return false;
    return true;
  }
  bool operator != (const MessageService_getKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_getKey_pargs {
 public:


  virtual ~MessageService_getKey_pargs() throw();
  const int32_t* id1;
  const int32_t* id2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getKey_result__isset {
  _MessageService_getKey_result__isset() : success(false) {}
  bool success :1;
} _MessageService_getKey_result__isset;

class MessageService_getKey_result {
 public:

  MessageService_getKey_result(const MessageService_getKey_result&);
  MessageService_getKey_result& operator=(const MessageService_getKey_result&);
  MessageService_getKey_result() {
  }

  virtual ~MessageService_getKey_result() throw();
  KeyMsgResult success;

  _MessageService_getKey_result__isset __isset;

  void __set_success(const KeyMsgResult& val);

  bool operator == (const MessageService_getKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MessageService_getKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getKey_presult__isset {
  _MessageService_getKey_presult__isset() : success(false) {}
  bool success :1;
} _MessageService_getKey_presult__isset;

class MessageService_getKey_presult {
 public:


  virtual ~MessageService_getKey_presult() throw();
  KeyMsgResult* success;

  _MessageService_getKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MessageService_getBoxinfo_args__isset {
  _MessageService_getBoxinfo_args__isset() : inbox_id(false) {}
  bool inbox_id :1;
} _MessageService_getBoxinfo_args__isset;

class MessageService_getBoxinfo_args {
 public:

  MessageService_getBoxinfo_args(const MessageService_getBoxinfo_args&);
  MessageService_getBoxinfo_args& operator=(const MessageService_getBoxinfo_args&);
  MessageService_getBoxinfo_args() : inbox_id() {
  }

  virtual ~MessageService_getBoxinfo_args() throw();
  std::string inbox_id;

  _MessageService_getBoxinfo_args__isset __isset;

  void __set_inbox_id(const std::string& val);

  bool operator == (const MessageService_getBoxinfo_args & rhs) const
  {
    if (!(inbox_id == rhs.inbox_id))
      return false;
    return true;
  }
  bool operator != (const MessageService_getBoxinfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getBoxinfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_getBoxinfo_pargs {
 public:


  virtual ~MessageService_getBoxinfo_pargs() throw();
  const std::string* inbox_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getBoxinfo_result__isset {
  _MessageService_getBoxinfo_result__isset() : success(false) {}
  bool success :1;
} _MessageService_getBoxinfo_result__isset;

class MessageService_getBoxinfo_result {
 public:

  MessageService_getBoxinfo_result(const MessageService_getBoxinfo_result&);
  MessageService_getBoxinfo_result& operator=(const MessageService_getBoxinfo_result&);
  MessageService_getBoxinfo_result() {
  }

  virtual ~MessageService_getBoxinfo_result() throw();
  IB_Info success;

  _MessageService_getBoxinfo_result__isset __isset;

  void __set_success(const IB_Info& val);

  bool operator == (const MessageService_getBoxinfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MessageService_getBoxinfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getBoxinfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getBoxinfo_presult__isset {
  _MessageService_getBoxinfo_presult__isset() : success(false) {}
  bool success :1;
} _MessageService_getBoxinfo_presult__isset;

class MessageService_getBoxinfo_presult {
 public:


  virtual ~MessageService_getBoxinfo_presult() throw();
  IB_Info* success;

  _MessageService_getBoxinfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MessageService_getNewMessages_args__isset {
  _MessageService_getNewMessages_args__isset() : inbox_id(false), old_count(false), new_count(false) {}
  bool inbox_id :1;
  bool old_count :1;
  bool new_count :1;
} _MessageService_getNewMessages_args__isset;

class MessageService_getNewMessages_args {
 public:

  MessageService_getNewMessages_args(const MessageService_getNewMessages_args&);
  MessageService_getNewMessages_args& operator=(const MessageService_getNewMessages_args&);
  MessageService_getNewMessages_args() : inbox_id(), old_count(0), new_count(0) {
  }

  virtual ~MessageService_getNewMessages_args() throw();
  std::string inbox_id;
  int32_t old_count;
  int32_t new_count;

  _MessageService_getNewMessages_args__isset __isset;

  void __set_inbox_id(const std::string& val);

  void __set_old_count(const int32_t val);

  void __set_new_count(const int32_t val);

  bool operator == (const MessageService_getNewMessages_args & rhs) const
  {
    if (!(inbox_id == rhs.inbox_id))
      return false;
    if (!(old_count == rhs.old_count))
      return false;
    if (!(new_count == rhs.new_count))
      return false;
    return true;
  }
  bool operator != (const MessageService_getNewMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getNewMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_getNewMessages_pargs {
 public:


  virtual ~MessageService_getNewMessages_pargs() throw();
  const std::string* inbox_id;
  const int32_t* old_count;
  const int32_t* new_count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getNewMessages_result__isset {
  _MessageService_getNewMessages_result__isset() : success(false) {}
  bool success :1;
} _MessageService_getNewMessages_result__isset;

class MessageService_getNewMessages_result {
 public:

  MessageService_getNewMessages_result(const MessageService_getNewMessages_result&);
  MessageService_getNewMessages_result& operator=(const MessageService_getNewMessages_result&);
  MessageService_getNewMessages_result() {
  }

  virtual ~MessageService_getNewMessages_result() throw();
  ListMessageResult success;

  _MessageService_getNewMessages_result__isset __isset;

  void __set_success(const ListMessageResult& val);

  bool operator == (const MessageService_getNewMessages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MessageService_getNewMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getNewMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getNewMessages_presult__isset {
  _MessageService_getNewMessages_presult__isset() : success(false) {}
  bool success :1;
} _MessageService_getNewMessages_presult__isset;

class MessageService_getNewMessages_presult {
 public:


  virtual ~MessageService_getNewMessages_presult() throw();
  ListMessageResult* success;

  _MessageService_getNewMessages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MessageServiceClient : virtual public MessageServiceIf {
 public:
  MessageServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MessageServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createMessage(MessageCreateResult& _return, const int32_t id_from, const std::string& inbox_id, const std::string& content);
  void send_createMessage(const int32_t id_from, const std::string& inbox_id, const std::string& content);
  void recv_createMessage(MessageCreateResult& _return);
  void getMessages(ListMessageResult& _return, const std::string& inbox_id, const int32_t count);
  void send_getMessages(const std::string& inbox_id, const int32_t count);
  void recv_getMessages(ListMessageResult& _return);
  void getKey(KeyMsgResult& _return, const int32_t id1, const int32_t id2);
  void send_getKey(const int32_t id1, const int32_t id2);
  void recv_getKey(KeyMsgResult& _return);
  void getBoxinfo(IB_Info& _return, const std::string& inbox_id);
  void send_getBoxinfo(const std::string& inbox_id);
  void recv_getBoxinfo(IB_Info& _return);
  void getNewMessages(ListMessageResult& _return, const std::string& inbox_id, const int32_t old_count, const int32_t new_count);
  void send_getNewMessages(const std::string& inbox_id, const int32_t old_count, const int32_t new_count);
  void recv_getNewMessages(ListMessageResult& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MessageServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MessageServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MessageServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_createMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBoxinfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNewMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MessageServiceProcessor(boost::shared_ptr<MessageServiceIf> iface) :
    iface_(iface) {
    processMap_["createMessage"] = &MessageServiceProcessor::process_createMessage;
    processMap_["getMessages"] = &MessageServiceProcessor::process_getMessages;
    processMap_["getKey"] = &MessageServiceProcessor::process_getKey;
    processMap_["getBoxinfo"] = &MessageServiceProcessor::process_getBoxinfo;
    processMap_["getNewMessages"] = &MessageServiceProcessor::process_getNewMessages;
  }

  virtual ~MessageServiceProcessor() {}
};

class MessageServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MessageServiceProcessorFactory(const ::boost::shared_ptr< MessageServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MessageServiceIfFactory > handlerFactory_;
};

class MessageServiceMultiface : virtual public MessageServiceIf {
 public:
  MessageServiceMultiface(std::vector<boost::shared_ptr<MessageServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MessageServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MessageServiceIf> > ifaces_;
  MessageServiceMultiface() {}
  void add(boost::shared_ptr<MessageServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void createMessage(MessageCreateResult& _return, const int32_t id_from, const std::string& inbox_id, const std::string& content) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createMessage(_return, id_from, inbox_id, content);
    }
    ifaces_[i]->createMessage(_return, id_from, inbox_id, content);
    return;
  }

  void getMessages(ListMessageResult& _return, const std::string& inbox_id, const int32_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMessages(_return, inbox_id, count);
    }
    ifaces_[i]->getMessages(_return, inbox_id, count);
    return;
  }

  void getKey(KeyMsgResult& _return, const int32_t id1, const int32_t id2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getKey(_return, id1, id2);
    }
    ifaces_[i]->getKey(_return, id1, id2);
    return;
  }

  void getBoxinfo(IB_Info& _return, const std::string& inbox_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBoxinfo(_return, inbox_id);
    }
    ifaces_[i]->getBoxinfo(_return, inbox_id);
    return;
  }

  void getNewMessages(ListMessageResult& _return, const std::string& inbox_id, const int32_t old_count, const int32_t new_count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNewMessages(_return, inbox_id, old_count, new_count);
    }
    ifaces_[i]->getNewMessages(_return, inbox_id, old_count, new_count);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MessageServiceConcurrentClient : virtual public MessageServiceIf {
 public:
  MessageServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MessageServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createMessage(MessageCreateResult& _return, const int32_t id_from, const std::string& inbox_id, const std::string& content);
  int32_t send_createMessage(const int32_t id_from, const std::string& inbox_id, const std::string& content);
  void recv_createMessage(MessageCreateResult& _return, const int32_t seqid);
  void getMessages(ListMessageResult& _return, const std::string& inbox_id, const int32_t count);
  int32_t send_getMessages(const std::string& inbox_id, const int32_t count);
  void recv_getMessages(ListMessageResult& _return, const int32_t seqid);
  void getKey(KeyMsgResult& _return, const int32_t id1, const int32_t id2);
  int32_t send_getKey(const int32_t id1, const int32_t id2);
  void recv_getKey(KeyMsgResult& _return, const int32_t seqid);
  void getBoxinfo(IB_Info& _return, const std::string& inbox_id);
  int32_t send_getBoxinfo(const std::string& inbox_id);
  void recv_getBoxinfo(IB_Info& _return, const int32_t seqid);
  void getNewMessages(ListMessageResult& _return, const std::string& inbox_id, const int32_t old_count, const int32_t new_count);
  int32_t send_getNewMessages(const std::string& inbox_id, const int32_t old_count, const int32_t new_count);
  void recv_getNewMessages(ListMessageResult& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
