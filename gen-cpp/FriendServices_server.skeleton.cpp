// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "FriendServices.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class FriendServicesHandler : virtual public FriendServicesIf {
 public:
  FriendServicesHandler() {
    // Your initialization goes here
  }

  void checkRequest(pingResult& _return, const int32_t id) {
    // Your implementation goes here
    printf("checkRequest\n");
  }

  ErrorCode::type addFriend(const FriendRequest& request) {
    // Your implementation goes here
    printf("addFriend\n");
  }

  ErrorCode::type acceptRequest(const int32_t curId, const int32_t requestId) {
    // Your implementation goes here
    printf("acceptRequest\n");
  }

  ErrorCode::type declineRequest(const int32_t curId, const int32_t requestId) {
    // Your implementation goes here
    printf("declineRequest\n");
  }

  ErrorCode::type removeFriend(const int32_t curId, const int32_t friendId) {
    // Your implementation goes here
    printf("removeFriend\n");
  }

  void viewFriendList(listFriendResult& _return, const int32_t id, const int32_t index, const int32_t size) {
    // Your implementation goes here
    printf("viewFriendList\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<FriendServicesHandler> handler(new FriendServicesHandler());
  shared_ptr<TProcessor> processor(new FriendServicesProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

